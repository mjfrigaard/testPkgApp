),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
dplyr::select(
app_data,
dplyr::all_of(
c(input$x, input$y,input$color, input$facet)
)) |>
purrr::set_names(c(
"num_app_inputs_x", "num_app_inputs_y",
"binary_app_inputs", "facet_app_inputs"
)) |>
str()
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = NHANES::NHANES)
library(shiny)
library(NHANES)
library(Lahman)
library(testPkgApp)
test_app_inputs <- function(data) {
# data
app_data <- data
# ui
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
num_app_inputs(df = app_data)
),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
dplyr::select(
app_data,
dplyr::all_of(
c(input$x, input$y,input$color, input$facet)
)) |>
purrr::set_names(c(
"num_app_inputs_x", "num_app_inputs_y",
"binary_app_inputs", "facet_app_inputs"
)) |>
str()
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = NHANES::NHANES)
library(shiny)
library(NHANES)
library(Lahman)
library(testPkgApp)
library(skimr)
test_app_inputs <- function(data) {
# data
app_data <- data
# ui
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
num_app_inputs(df = app_data)
),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
dplyr::select(
app_data,
dplyr::all_of(
c(input$x, input$y,input$color, input$facet)
)) |>
purrr::set_names(c(
"num_app_inputs_x", "num_app_inputs_y",
"binary_app_inputs", "facet_app_inputs"
)) |>
skimr::skim()
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = NHANES::NHANES)
library(shiny)
library(NHANES)
library(Lahman)
library(testPkgApp)
library(skimr)
test_app_inputs <- function(data) {
# data
app_data <- data
# ui
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
num_app_inputs(df = app_data)
),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
selected_df <- dplyr::select(
app_data,
dplyr::all_of(
c(input$x, input$y,input$color, input$facet)
)) |>
purrr::set_names(c(
"num_app_inputs_x", "num_app_inputs_y",
"binary_app_inputs", "facet_app_inputs"))
skimr::skim(selected_df)
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = NHANES::NHANES)
library(shiny)
library(NHANES)
library(Lahman)
library(testPkgApp)
library(skimr)
test_app_inputs <- function(data) {
# data
app_data <- data
# ui
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
num_app_inputs(df = app_data)
),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
selected_df <- dplyr::select(
app_data,
dplyr::all_of(
c(input$x, input$y,input$color, input$facet)
)) |>
purrr::set_names(c(
"num_app_inputs_x", "num_app_inputs_y",
"binary_app_inputs", "facet_app_inputs"))
skimr::skim(selected_df)
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = Lahman::People)
library(shiny)
library(NHANES)
library(Lahman)
library(testPkgApp)
library(skimr)
test_app_inputs <- function(data) {
# data
app_data <- data
# ui
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
num_app_inputs(df = app_data)
),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
selected_df <- dplyr::select(
app_data,
dplyr::any_of(
c(input$x, input$y,input$color, input$facet)
)) |>
purrr::set_names(c(
"num_app_inputs_x", "num_app_inputs_y",
"binary_app_inputs", "facet_app_inputs"))
skimr::skim(selected_df)
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = Lahman::People)
library(shiny)
library(NHANES)
library(Lahman)
library(testPkgApp)
library(skimr)
test_app_inputs <- function(data) {
# data
app_data <- data
# ui
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
num_app_inputs(df = app_data)
),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
selected_df <- dplyr::select(
app_data,
dplyr::any_of(
c(input$x, input$y,input$color, input$facet)
))
skimr::skim(selected_df)
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = Lahman::People)
library(shiny)
library(NHANES)
library(testPkgApp)
library(skimr)
test_app_inputs <- function(data) {
# data
app_data <- data
# ui
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
num_app_inputs(df = app_data)
),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
selected_df <- dplyr::select(
app_data,
dplyr::any_of(
c(input$x, input$y,input$color, input$facet)
)) |>
purrr::set_names(c(
"num_app_inputs_x", "num_app_inputs_y",
"binary_app_inputs", "facet_app_inputs"))
skimr::skim(selected_df)
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = NHANES::NHANES)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(testPkgApp)
test_app_inputs()
test_app_inputs(NHANES::NHANES)
renv::status()
renv::snapshot()
