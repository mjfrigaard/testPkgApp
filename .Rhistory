# five level factor, sixth value not included in levels
fct_facet_5naS = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5")),
# four level factor, three levels represented
fct_facet_4naS = factor(sample(x = c("group 1", "group 2",
"group 3", NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4")),
# six level factor
no_facet_fct_6na = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6")),
# ten level character variable (no missing)
no_facet_chr_10 = c(LETTERS[1:10]),
# ten level character variable (with missing)
no_facet_chr_10na = sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
# ten level factor variable (no missing)
no_facet_10fct = factor(x = sample(c(LETTERS[1:10]), 10, TRUE),
levels = c(LETTERS[1:10])),
# ten level factor variable (with missing)
no_facet_fct_10na = factor(sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
levels = c(LETTERS[1:10])))
usethis::use_data(testdf_app_inputs, overwrite = TRUE)
devtools::load_all()
devtools::document()
library(testPkgApp)
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
dput(names(get_col_type_df(testdf_app_inputs, type = "fct")))
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
dput(names(get_col_type_df(testdf_app_inputs, type = "chr")))
styler:::style_selection()
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
## code to prepare `testdf_app_inputs` dataset goes here
require(tibble)
# test data ----------------------------
testdf_app_inputs <- tibble::tibble(
log_na_bin = sample(x = c(TRUE, FALSE, NA, TRUE), 10, TRUE),
log_bin = sample(x = c(TRUE, FALSE, FALSE, TRUE), 10, TRUE),
int_bin = sample(x = c(0L, 1L, NA_integer_, 1L), 10, TRUE),
# two-level character facet variable (with missing)
chr_3l_na_facet = sample(x = c("A", "B", NA_character_, "B"),
10, TRUE),
# two level ordinal binary factor (with missing)
ord_bin = factor(x = sample(x = c("high", "low",
NA_character_, "high"),
10, TRUE),
levels = c("low", "high"),
ordered = TRUE),
# two level binary factor (with missing)
fct_bin = factor(sample(x = c("hot", "cold",
NA_character_, "cold"),
10, TRUE),
levels = c("hot", "cold")),
# character facet variable (4 unique values)
chr_4l_facet = sample(x = c("A", "B", "C", "D"), 10, TRUE),
# three level integer variable (with missing)
int_3l_na = sample(x = c(0L, 1L, NA_integer_, 2L), 10, TRUE),
# three level double variable (with missing)
dbl_3l_na = sample(x = c(0.5, 1.2, NA_real_, 0.001), 10, TRUE),
# three level ordinal factor (with missing)
ord_3l_na = factor(sample(x = c("high", "low",
NA_character_, "med"), 10, TRUE),
levels = c("low", "high","med"),
ordered = TRUE),
# three level ordinal factor (no missing)
ord_3l = factor(sample(x = c("high", "low", "med"), 10, TRUE),
levels = c("low", "high","med"),
ordered = TRUE),
# three level factor (with missing)
fct_3l_facet = factor(sample(x = c("left", "right", "center"),
10, TRUE),
levels = c("left", "right", "center")),
# three level factor (no missing)
fct_3l_na_facet = factor(sample(x = c("left", "right",
NA_character_, "center"),
10, TRUE),
levels = c("left", "right", "center")),
# five level factor, sixth value not included in levels
fct_5lv6rep_na_facet = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5")),
# four level factor, three levels represented
fct_4lv3rep_na_facet = factor(sample(x = c("group 1", "group 2",
"group 3", NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4")),
# six level factor
fct_6l_na = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6")),
# ten level character variable (no missing)
chr_10l = c(LETTERS[1:10]),
# ten level character variable (with missing)
chr_10l_na = sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
# ten level factor variable (no missing)
fct_10l = factor(x = sample(c(LETTERS[1:10]), 10, TRUE),
levels = c(LETTERS[1:10])),
# ten level factor variable (with missing)
fct_10l_na = factor(sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
levels = c(LETTERS[1:10])))
usethis::use_data(testdf_app_inputs, overwrite = TRUE)
devtools::load_all()
devtools::document()
library(testPkgApp)
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
dput(names(get_col_type_df(testdf_app_inputs, type = "int")))
dput(names(get_col_type_df(testdf_app_inputs, type = "dbl")))
dput(names(get_col_type_df(testdf_app_inputs, type = "chr")))
names(get_col_type_df(testdf_app_inputs, type = "fct"))
dput(names(get_col_type_df(testdf_app_inputs, type = "fct")))
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
## code to prepare `testdf_app_inputs` dataset goes here
require(tibble)
# test data ----------------------------
testdf_app_inputs <- tibble::tibble(
# logical binary (with missing)
log_na_bin = sample(x = c(TRUE, FALSE, NA, TRUE), 10, TRUE),
# logical binary (no missing)
log_bin = sample(x = c(TRUE, FALSE, FALSE, TRUE), 10, TRUE),
# integer binary (with missing)
int_bin = sample(x = c(0L, 1L, NA_integer_, 1L), 10, TRUE),
# two-level character facet variable (with missing)
chr_3l_na_facet = sample(x = c("A", "B", NA_character_, "B"),
10, TRUE),
# two level ordinal binary factor (with missing)
ord_bin = factor(x = sample(x = c("high", "low",
NA_character_, "high"),
10, TRUE),
levels = c("low", "high"),
ordered = TRUE),
# two level binary factor (with missing)
fct_bin = factor(sample(x = c("hot", "cold",
NA_character_, "cold"),
10, TRUE),
levels = c("hot", "cold")),
# character facet variable (4 unique values)
chr_4l_facet = sample(x = c("A", "B", "C", "D"), 10, TRUE),
# three level integer variable (with missing)
int_3l_na = sample(x = c(0L, 1L, NA_integer_, 2L), 10, TRUE),
# three level double variable (with missing)
dbl_3l_na = sample(x = c(0.5, 1.2, NA_real_, 0.001), 10, TRUE),
# three level ordinal factor (with missing)
ord_3l_na = factor(sample(x = c("high", "low",
NA_character_, "med"), 10, TRUE),
levels = c("low", "high","med"),
ordered = TRUE),
# three level ordinal factor (no missing)
ord_3l = factor(sample(x = c("high", "low", "med"), 10, TRUE),
levels = c("low", "high","med"),
ordered = TRUE),
# three level factor (with missing)
fct_3l_facet = factor(sample(x = c("left", "right", "center"),
10, TRUE),
levels = c("left", "right", "center")),
# three level factor (no missing)
fct_3l_na_facet = factor(sample(x = c("left", "right",
NA_character_, "center"),
10, TRUE),
levels = c("left", "right", "center")),
# five level factor, sixth value not included in levels
fct_5lv6rep_na_facet = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5")),
# four level factor, three levels represented
fct_4lv3rep_na_facet = factor(sample(x = c("group 1", "group 2",
"group 3", NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4")),
# six level factor
fct_6l_na = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6")),
# ten level character variable (no missing)
chr_10l = c(LETTERS[1:10]),
# ten level character variable (with missing)
chr_10l_na = sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
# ten level factor variable (no missing)
fct_10l = factor(x = sample(c(LETTERS[1:10]), 10, TRUE),
levels = c(LETTERS[1:10])),
# ten level factor variable (with missing)
fct_10l_na = factor(sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
levels = c(LETTERS[1:10])))
usethis::use_data(testdf_app_inputs, overwrite = TRUE)
devtools::load_all()
devtools::document()
library(testPkgApp)
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
## code to prepare `testdf_app_inputs` dataset goes here
require(tibble)
require(readr)
# test data ----------------------------
testdf_app_inputs <- tibble::tibble(
# logical binary (with missing)
log_na_bin = sample(x = c(TRUE, FALSE, NA, TRUE), 10, TRUE),
# logical binary (no missing)
log_bin = sample(x = c(TRUE, FALSE, FALSE, TRUE), 10, TRUE),
# integer binary (with missing)
int_bin = sample(x = c(0L, 1L, NA_integer_, 1L), 10, TRUE),
# two-level character facet variable (with missing)
chr_3l_na_facet = sample(x = c("A", "B", NA_character_, "B"),
10, TRUE),
# two level ordinal binary factor (with missing)
ord_bin = factor(x = sample(x = c("high", "low",
NA_character_, "high"),
10, TRUE),
levels = c("low", "high"),
ordered = TRUE),
# two level binary factor (with missing)
fct_bin = factor(sample(x = c("hot", "cold",
NA_character_, "cold"),
10, TRUE),
levels = c("hot", "cold")),
# character facet variable (4 unique values)
chr_4l_facet = sample(x = c("A", "B", "C", "D"), 10, TRUE),
# three level integer variable (with missing)
int_3l_na = sample(x = c(0L, 1L, NA_integer_, 2L), 10, TRUE),
# three level double variable (with missing)
dbl_3l_na = sample(x = c(0.5, 1.2, NA_real_, 0.001), 10, TRUE),
# three level ordinal factor (with missing)
ord_3l_na = factor(sample(x = c("high", "low",
NA_character_, "med"), 10, TRUE),
levels = c("low", "high","med"),
ordered = TRUE),
# three level ordinal factor (no missing)
ord_3l = factor(sample(x = c("high", "low", "med"), 10, TRUE),
levels = c("low", "high","med"),
ordered = TRUE),
# three level factor (with missing)
fct_3l_facet = factor(sample(x = c("left", "right", "center"),
10, TRUE),
levels = c("left", "right", "center")),
# three level factor (no missing)
fct_3l_na_facet = factor(sample(x = c("left", "right",
NA_character_, "center"),
10, TRUE),
levels = c("left", "right", "center")),
# five level factor, sixth value not included in levels
fct_5lv6rep_na_facet = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5")),
# four level factor, three levels represented
fct_4lv3rep_na_facet = factor(sample(x = c("group 1", "group 2",
"group 3", NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4")),
# six level factor
fct_6l_na = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6")),
# ten level character variable (no missing)
chr_10l = c(LETTERS[1:10]),
# ten level character variable (with missing)
chr_10l_na = sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
# ten level factor variable (no missing)
fct_10l = factor(x = sample(c(LETTERS[1:10]), 10, TRUE),
levels = c(LETTERS[1:10])),
# ten level factor variable (with missing)
fct_10l_na = factor(sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
levels = c(LETTERS[1:10])))
usethis::use_data(testdf_app_inputs, overwrite = TRUE)
# export to tests/testthat/fixtures/
readr::write_rds(x = testdf_app_inputs,
file = "tests/testthat/fixtures/testdf_app_inputs.rds")
# export to tests/testthat/fixtures/
readr::write_rds(x = testdf_app_inputs,
file = "tests/testthat/fixtures/testdf_app_inputs.rds")
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
## code to prepare `testdf_app_inputs` dataset goes here
require(tibble)
require(readr)
# test data ----------------------------
testdf_app_inputs <- tibble::tibble(
# logical binary (with missing)
log_na_bin = sample(x = c(TRUE, FALSE, NA, TRUE), 10, TRUE),
# logical binary (no missing)
log_bin = sample(x = c(TRUE, FALSE, FALSE, TRUE), 10, TRUE),
# integer binary (with missing)
int_bin = sample(x = c(0L, 1L, NA_integer_, 1L), 10, TRUE),
# two-level character facet variable (with missing)
chr_3l_na_facet = sample(x = c("A", "B", NA_character_, "B"),
10, TRUE),
# two level ordinal binary factor (with missing)
ord_bin = factor(x = sample(x = c("high", "low",
NA_character_, "high"),
10, TRUE),
levels = c("low", "high"),
ordered = TRUE),
# two level binary factor (with missing)
fct_bin = factor(sample(x = c("hot", "cold",
NA_character_, "cold"),
10, TRUE),
levels = c("hot", "cold")),
# character facet variable (4 unique values)
chr_4l_facet = sample(x = c("A", "B", "C", "D"), 10, TRUE),
# three level integer variable (with missing)
int_3l_na = sample(x = c(0L, 1L, NA_integer_, 2L), 10, TRUE),
# three level double variable (with missing)
dbl_3l_na = sample(x = c(0.5, 1.2, NA_real_, 0.001), 10, TRUE),
# three level ordinal factor (with missing)
ord_3l_na = factor(sample(x = c("high", "low",
NA_character_, "med"), 10, TRUE),
levels = c("low", "high","med"),
ordered = TRUE),
# three level ordinal factor (no missing)
ord_3l = factor(sample(x = c("high", "low", "med"), 10, TRUE),
levels = c("low", "high","med"),
ordered = TRUE),
# three level factor (with missing)
fct_3l_facet = factor(sample(x = c("left", "right", "center"),
10, TRUE),
levels = c("left", "right", "center")),
# three level factor (no missing)
fct_3l_na_facet = factor(sample(x = c("left", "right",
NA_character_, "center"),
10, TRUE),
levels = c("left", "right", "center")),
# five level factor, sixth value not included in levels
fct_5lv6rep_na_facet = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5")),
# four level factor, three levels represented
fct_4lv3rep_na_facet = factor(sample(x = c("group 1", "group 2",
"group 3", NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4")),
# six level factor
fct_6l_na = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6")),
# ten level character variable (no missing)
chr_10l = c(LETTERS[1:10]),
# ten level character variable (with missing)
chr_10l_na = sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
# ten level factor variable (no missing)
fct_10l = factor(x = sample(c(LETTERS[1:10]), 10, TRUE),
levels = c(LETTERS[1:10])),
# ten level factor variable (with missing)
fct_10l_na = factor(sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
levels = c(LETTERS[1:10])))
usethis::use_data(testdf_app_inputs, overwrite = TRUE)
# export to tests/testthat/fixtures/
saveRDS(testdf_app_inputs,
file = "tests/testthat/fixtures/testdf_app_inputs.rds")
usethis::use_test("binary_app_inputs")
# run utility function tests ----------------------------------------------
# testthat::test_file(path = "tests/testthat/test-binary_vars.R")
testthat::test_file(path = "tests/testthat/test-binary_app_inputs.R")
# run utility function tests ----------------------------------------------
# testthat::test_file(path = "tests/testthat/test-binary_vars.R")
testthat::test_file(path = "tests/testthat/test-binary_app_inputs.R")
binary_app_inputs <- function(df) {
log_df <- dplyr::select(tibble::as_tibble(df),
dplyr::where(is.logical))
if (ncol(log_df) > 0) {
# get names
nms <- names(log_df)
# set names in names
df_nms <- purrr::set_names(nms)
check_log_binary <- function(x) {
all(na.omit(x) %in% TRUE:FALSE)
}
bins <- sapply(log_df, check_log_binary)
return(df_nms[bins])
}
# run utility function tests ----------------------------------------------
# testthat::test_file(path = "tests/testthat/test-binary_vars.R")
testthat::test_file(path = "tests/testthat/test-binary_app_inputs.R")
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
devtools::load_all()
devtools::document()
library(testPkgApp)
get_col_type_df(dplyr::starwars, type = "chr")
glimpse(dplyr::starwars)
devtools::load_all()
devtools::document()
library(testPkgApp)
renv::status()
renv::snapshot()
devtools::load_all()
devtools::document()
library(testPkgApp)
# run utility function tests ----------------------------------------------
# testthat::test_file(path = "tests/testthat/test-binary_vars.R")
testthat::test_file(path = "tests/testthat/test-binary_app_inputs.R")
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
"%nin%" <- function(x, table) match(x, table, nomatch = 0) == 0
1 %nin% 1:10
1 %in% 1:10
#' Inverted versions of `%in%`, is.null and is.na
#'
#' @export
#'
#' @examples
#' 1 %not_in% 1:10
#' not_null(NULL)
`%nin%` <- function(x, table) {
match(x, table, nomatch = 0) == 0
}
not_na <- function(x) {
Negate(is.na(x))
}
not_na(c(NA_character_, "A"))
#' Inverted versions of is.na
#'
#' @export
#'
#' @examples
#' 1 %nin% 1:10
#' "A" %nin% 1:10
not_na <- function() {
Negate(is.na)
}
not_na(c(NA_character_, "A"))
#' Inverted versions of is.na
#'
#' @export
#'
#' @examples
#' 1 %nin% 1:10
#' "A" %nin% 1:10
not_na <- Negate(is.na)
not_na(c(NA_character_, "A"))
#' Inverted versions of is.null
#'
#' @export
#'
#' @examples
#' 1 %nin% 1:10
#' "A" %nin% 1:10
not_null <- Negate(is.null)
not_null(c(NULL, NA_character_))
devtools::load_all()
devtools::document()
library(testPkgApp)
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
usethis::use_r("utils_app_inputs")
devtools::load_all()
devtools::document()
library(testPkgApp)
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
devtools::load_all()
devtools::document()
library(testPkgApp)
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
devtools::load_all()
devtools::document()
library(testPkgApp)
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
devtools::load_all()
devtools::document()
library(testPkgApp)
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
devtools::load_all()
devtools::document()
library(testPkgApp)
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
