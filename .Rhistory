object = pull_facet_cols(test_fct_facets),
expected = purrr::set_names(c("fct_facet4", "fct_facet4_na"))
)
})
testthat::test_that("pull_facet_cols() ordinal cols", {
test_ord_facets <- tibble::tibble(
ord_facet4 = facet_maker(
facet_type = "ord", size = 10, lvls = 4, missing = FALSE),
ord_facet4_na = facet_maker(
facet_type = "ord", size = 10, lvls = 4, missing = TRUE),
ord_facet5 = facet_maker(
facet_type = "ord", size = 10, lvls = 5, missing = FALSE),
ord_facet5_na = facet_maker(
facet_type = "ord", size = 10, lvls = 5, missing = TRUE))
expect_equal(
object = pull_facet_cols(test_ord_facets),
expected = purrr::set_names(c("ord_facet4", "ord_facet4_na"))
)
})
test_fct_facets <- tibble::tibble(
facet = facet_maker(
facet_type = "fct", size = 10, lvls = 4, missing = FALSE),
facet_na = facet_maker(
facet_type = "fct", size = 10, lvls = 4, missing = TRUE),
no_facet = facet_maker(
facet_type = "fct", size = 10, lvls = 5, missing = FALSE),
no_facet_na = facet_maker(
facet_type = "fct", size = 10, lvls = 5, missing = TRUE))
pull_facet_cols(test_fct_facets)
testthat::test_that("pull_facet_cols() factor cols", {
test_fct_facets <- tibble::tibble(
facet = facet_maker(
facet_type = "fct", size = 10, lvls = 4, missing = FALSE),
facet_na = facet_maker(
facet_type = "fct", size = 10, lvls = 4, missing = TRUE),
no_facet = facet_maker(
facet_type = "fct", size = 10, lvls = 5, missing = FALSE),
no_facet_na = facet_maker(
facet_type = "fct", size = 10, lvls = 5, missing = TRUE))
expect_equal(
object = pull_facet_cols(test_fct_facets),
expected = purrr::set_names(c("facet", "facet_na"))
)
})
testthat::test_that("pull_facet_cols() factor cols", {
expect_equal(
object = pull_facet_cols(df =
tibble::tibble(
facet = facet_maker(
facet_type = "fct", size = 10, lvls = 4, missing = FALSE),
facet_na = facet_maker(
facet_type = "fct", size = 10, lvls = 4, missing = TRUE),
no_facet = facet_maker(
facet_type = "fct", size = 10, lvls = 5, missing = FALSE),
no_facet_na = facet_maker(
facet_type = "fct", size = 10, lvls = 5, missing = TRUE))),
expected = purrr::set_names(c("facet", "facet_na"))
)
})
testthat::test_that("pull_facet_cols() ordinal cols", {
expect_equal(
object = pull_facet_cols(
df = tibble::tibble(
facet = facet_maker(
facet_type = "ord", size = 10, lvls = 4, missing = FALSE),
facet_na = facet_maker(
facet_type = "ord", size = 10, lvls = 4, missing = TRUE),
no_facet = facet_maker(
facet_type = "ord", size = 10, lvls = 5, missing = FALSE),
no_facet_na = facet_maker(
facet_type = "ord", size = 10, lvls = 5, missing = TRUE))),
expected = purrr::set_names(c("facet", "facet_na"))
)
})
testthat::test_that("pull_facet_cols() works", {
app_inputs_test <-
readRDS(testthat::test_path("fixtures", "pull_cols_test.rds"))
# remove binary columns
expect_equal(
object = dplyr::select(app_inputs_test,!dplyr::contains("bin")) |> pull_facet_cols(),
expected =
c(chr_facet4 = "chr_facet4",
chr_facet4_na = "chr_facet4_na",
fct_facet4 = "fct_facet4",
fct_facet4_na = "fct_facet4_na",
ord_facet4 = "ord_facet4",
ord_facet4_na = "ord_facet4_na")
)
})
test_chr_facets <- tibble::tibble(
facet_na = facet_maker(
facet_type = "chr", size = 10, lvls = 4, missing = TRUE),
facet = facet_maker(
facet_type = "fct", size = 10, lvls = 4, missing = FALSE),
no_facet_na = facet_maker(
facet_type = "chr", size = 10, lvls = 5, missing = TRUE),
no_facet = facet_maker(
facet_type = "fct", size = 10, lvls = 5, missing = FALSE))
test_chr_facets
testthat::test_that("pull_facet_cols() character cols", {
test_chr_facets <- tibble::tibble(
facet_na = facet_maker(
facet_type = "chr", size = 10, lvls = 4, missing = TRUE),
facet = facet_maker(
facet_type = "fct", size = 10, lvls = 4, missing = FALSE),
no_facet_na = facet_maker(
facet_type = "chr", size = 10, lvls = 5, missing = TRUE),
no_facet = facet_maker(
facet_type = "fct", size = 10, lvls = 5, missing = FALSE))
expect_equal(
object = pull_facet_cols(test_chr_facets),
expected = purrr::set_names(c("facet_na", "facet"))
)
})
devtools::test_coverage_active_file()
# test empty table
testthat::test_that("select_column_class() return zero columns", {
# test class of empty tibble
testthat::expect_s3_class(
object = select_column_class(
df = col_maker(col_type = c("int", "dbl"),
size = 6,
missing = FALSE),
class = "log"),
class = c("tbl_df", "tbl", "data.frame"))
# test rows of empty tibble
testthat::expect_equal(
object = ncol(select_column_class(
df = col_maker(col_type = c("int", "dbl"),
size = 6,
missing = FALSE),
class = "log")),
expected = 0L)
})
devtools::test_coverage_active_file()
testthat::test_file("tests/testthat/test-column_classes.R")
usethis::use_test("utils")
1 %nin% 1:10
"A" %nin% LETTERS
testthat::test_that("%nin% works", {
testthat::expect_false(
object = "A" %nin% LETTERS)
testthat::expect_false(
object = 1 %nin% 1:10)
testthat::expect_true(
object = 1 %nin% 2:10)
})
fs::dir_tree("tests")
binary_vec_test <- tibble::tibble(
log = log_maker(size = 3, missing = FALSE),
log_na = log_maker(size = 3, missing = TRUE),
int = int_maker(size = 3, missing = FALSE),
int_na = int_maker(size = 3, missing = TRUE)
)
binary_vec_test
binary_vec_test <- tibble::tibble(
log = bin_maker(bin_type = "log", size = 3, missing = FALSE),
log_na = bin_maker(bin_type = "log", size = 3, missing = TRUE),
int = bin_maker(bin_type = "int", size = 3, missing = FALSE),
int_na = bin_maker(bin_type = "int", size = 3, missing = TRUE),
chr = bin_maker(bin_type = "chr", size = 3, missing = FALSE),
chr_na = bin_maker(bin_type = "chr", size = 3, missing = TRUE)
)
binary_vec_test
binary_vec_test <- tibble::tibble(
log = bin_maker(bin_type = "log", size = 3, missing = FALSE),
log_na = bin_maker(bin_type = "log", size = 3, missing = TRUE),
int = bin_maker(bin_type = "int", size = 3, missing = FALSE),
int_na = bin_maker(bin_type = "int", size = 3, missing = TRUE),
chr = bin_maker(bin_type = "chr", size = 3, missing = FALSE),
chr_na = bin_maker(bin_type = "chr", size = 3, missing = TRUE),
fct = bin_maker(bin_type = "fct", size = 3, missing = FALSE),
fct_na = bin_maker(bin_type = "fct", size = 3, missing = TRUE),
ord = bin_maker(bin_type = "ord", size = 3, missing = FALSE),
ord_na = bin_maker(bin_type = "ord", size = 3, missing = TRUE)
)
binary_vec_test
test_that("make_binary_vec() works", {
binary_vec_test <- tibble::tibble(
log = bin_maker(bin_type = "log", size = 3, missing = FALSE),
log_na = bin_maker(bin_type = "log", size = 3, missing = TRUE),
int = bin_maker(bin_type = "int", size = 3, missing = FALSE),
int_na = bin_maker(bin_type = "int", size = 3, missing = TRUE),
chr = bin_maker(bin_type = "chr", size = 3, missing = FALSE),
chr_na = bin_maker(bin_type = "chr", size = 3, missing = TRUE),
fct = bin_maker(bin_type = "fct", size = 3, missing = FALSE),
fct_na = bin_maker(bin_type = "fct", size = 3, missing = TRUE),
ord = bin_maker(bin_type = "ord", size = 3, missing = FALSE),
ord_na = bin_maker(bin_type = "ord", size = 3, missing = TRUE)
)
# test logical
expect_equal(
object = select(binary_vec_test, where(is.logical)) |>
make_binary_vec(type = "log"),
expected = purrr::set_names(c("log", "log_na"))
)
# test integer
expect_equal(
object = select(binary_vec_test, where(is.integer)) |>
make_binary_vec(type = "int"),
expected = purrr::set_names(c("int", "int_na"))
)
# test character
expect_equal(
object = select(binary_vec_test, where(is.character)) |>
make_binary_vec(type = "chr"),
expected = purrr::set_names(c("chr", "chr_na"))
)
# test factor
expect_equal(
object = select(binary_vec_test,
dplyr::all_of(c("fct", "fct_na"))) |>
make_binary_vec(type = "fct"),
expected = purrr::set_names(c("fct", "fct_na"))
)
# test ordered
expect_equal(
object = select(binary_vec_test,
dplyr::all_of(c("ord", "ord_na"))) |>
make_binary_vec(type = "fct"),
expected = purrr::set_names(c("ord", "ord_na"))
)
})
fs::dir_tree("tests/testthat/")
fs::dir_tree("tests/testthat/", recurse = FALSE)
devtools::test()
remotes::install_github("hrbrmstr/cloc")
library(cloc)
renv::snapshot()
cloc_by_file("R")
cloc_by_file("tests/testthat")
devtools::load_all(".")
library(utap)
cloc_by_file("R")
devtools::test_coverage()
covr::code_coverage()
covr::code_coverage(source_code = "R")
covr::code_coverage(source_code = "R", test_code = "tests/testthat/")
covr::code_coverage(source_code = "R/", test_code = "tests/testthat/")
covr::package_coverage()
install.packages("lobstr")
#| echo: false
fs::dir_tree("R/")
knitr::opts_chunk$set(
collapse = FALSE,
comment = "\t",
eval = TRUE
)
source("../tests/testthat/helper.R")
test_data <- tibble::tibble(
list_var = list(fct_vec = fct_maker(size = 3),
ord_vec = ord_maker(size = 3),
chr_vec = chr_maker(size = 3)),
log_var = log_maker(size = 3),
int_var = int_maker(size = 3),
dbl_var = dbl_maker(size = 3),
facet_maker(facet_type = "fct", lvls = 2, size = 3),
bin_maker(bin_type = "log", size = 3)
)
test_data
test_data <- tibble::tibble(
list_var = list(fct_vec = fct_maker(size = 3),
ord_vec = ord_maker(size = 3),
chr_vec = chr_maker(size = 3),
log_vec = log_maker(size = 3),
int_vec = int_maker(size = 3),
dbl_vec = dbl_maker(size = 3)),
log_var = log_maker(size = 6),
int_var = int_maker(size = 6),
dbl_var = dbl_maker(size = 6),
facet_var = facet_maker(facet_type = "fct", lvls = 2, size = 6),
bin_var = bin_maker(bin_type = "log", size = 6)
)
test_data
select_column_class(df = test_data, class = "log")
select_column_class(
df = test_data,
class = "log")
select_column_class(
df = test_data,
class = c("int", "list"))
get_column_class(
df = test_data,
class = c("int", "dbl"),
return_tbl = TRUE)
get_column_class(
df = test_data,
class = c("int", "dbl"),
return_tbl = FALSE)
pull_cat_cols(df = test_data)
devtools::load_all(".")
library(utap)
devtools::load_all(".")
library(utap)
knitr::opts_chunk$set(
collapse = FALSE,
comment = "\t",
eval = TRUE
)
source("../tests/testthat/helper.R")
library(utap)
library(lobstr)
pull_cat_cols(df = test_data)
pull_facet_cols(df = test_data)
test_data <- tibble::tibble(
list_var = list(fct_vec = fct_maker(size = 3),
ord_vec = ord_maker(size = 3),
chr_vec = chr_maker(size = 3),
log_vec = log_maker(size = 3),
int_vec = int_maker(size = 3),
dbl_vec = dbl_maker(size = 3)),
log_var = log_maker(size = 6, missing = TRUE),
int_var = int_maker(size = 6, missing = TRUE),
dbl_var = dbl_maker(size = 6, missing = TRUE),
facet_var = facet_maker(facet_type = "fct",
lvls = 2, missing = TRUE,
size = 6),
bin_var = bin_maker(bin_type = "log",
missing = TRUE, size = 6))
#' pull_facet_cols(df = NHANES::NHANES)
#'
#' str(dplyr::select(
#'   dplyr::starwars,
#'   dplyr::all_of(pull_facet_cols(df = dplyr::starwars))
#' ))
#' str(dplyr::select(
#'   NHANES::NHANES,
#'   dplyr::all_of(pull_facet_cols(df = NHANES::NHANES))
#' ))
pull_facet_cols <- function(df) {
# get bins
bins <- pull_binary_cols(df)
# character
chr_facets <- get_column_class(df = df,
class = "chr",
return_tbl = TRUE) |>
make_facet_vec(type = "chr")
# factors
fct_facets <- get_column_class(df = df,
class = "fct",
return_tbl = TRUE) |>
make_facet_vec(type = "fct")
# assemble
all_facets_list <- list(chr_facets, fct_facets)
# reduce
facets_list <- purrr::compact(all_facets_list)
# vector
all_facets <- purrr::list_c(facets_list)
# reduce
facets <- all_facets[all_facets %nin% bins]
return(facets)
}
pull_facet_cols(df = test_data)
source("~/projects/apps/utap/R/pull_facet_cols.R")
binary_vec_test
bins
source("~/projects/apps/utap/R/pull_facet_cols.R")
bins
chr_facets
fct_facets
source("~/projects/apps/utap/R/pull_facet_cols.R")
facet_set
source("~/projects/apps/utap/R/pull_facet_cols.R")
facet_set
source("~/projects/apps/utap/R/pull_facet_cols.R")
devtools::load_all(".")
library(utap)
devtools::load_all(".")
library(utap)
renv::status()
renv::snapshot()
renv::status()
renv::snapshot()
knitr::opts_chunk$set(
collapse = FALSE,
comment = "\t",
eval = TRUE
)
source("../tests/testthat/helper.R")
devtools::load_all(".")
library(utap)
usethis::use_pkgdown_github_pages()
pkgdown::build_site_github_pages()
pkgdown::preview_site()
knitr::opts_chunk$set(
collapse = FALSE,
comment = "\t",
eval = TRUE
)
source("../tests/testthat/helper.R")
lobstr::ast(
select_column_class(
col_class() # nested (not defined in roxygen2)
)
#| eval: false
#| echo: true
lobstr::ast(
get_column_class(
select_column_class(
col_class() # nested (not defined in roxygen2)
)
#| eval: false
#| echo: true
lobstr::ast(
get_column_class(
select_column_class(col_class()),
pull_binary_cols(),
pull_facet_cols(),
pull_cat_cols(),
pull_numeric_cols())
)
#| eval: false
#| echo: true
lobstr::ast(
pull_binary_cols(check_binary_vec(
check_log_binary(),
check_int_binary(),
check_fct_binary()),
make_binary_vec()))
#| eval: false
#| echo: true
lobstr::ast(
pull_facet_cols(check_facet_vec(
check_chr_facet(),
check_fct_facet()),
make_facet_vec())
)
devtools::load_all(".")
library(utap)
renv::status()
renv::snapshot()
devtools::load_all(".")
library(utap)
devtools::load_all(".")
library(utap)
pkgdown::build_site_github_pages()
pkgdown::preview_site()
pkgdown::build_site_github_pages()
pkgdown::preview_site()
install.packages("palmerpenguins")
renv::snapshot()
renv::install("palmerpenguins")
renv::snapshot()
devtools::load_all(".")
library(utap)
pkgdown::build_site_github_pages()
renv::remove("zeallot")
renv::snapshot()
devtools::load_all(".")
library(utap)
pkgdown::build_site_github_pages()
pkgdown::preview_site()
install.packages("dplyr")
renv::install("dplyr")
renv::snapshot()
devtools::load_all(".")
library(utap)
pkgdown::build_site_github_pages()
pkgdown::preview_site()
pkgs <- c("AsioHeaders", "askpass", "assertthat", "attempt", "backports",
"base64enc", "blob", "box", "brew", "brio", "broom", "bslib",
"cachem", "callr", "cellranger", "checkmate", "chromote", "cli",
"clipr", "colorspace", "commonmark", "config", "conflicted",
"cpp11", "crayon", "credentials", "curl", "cyclocomp", "data.table",
"DBI", "dbplyr", "debugme", "desc", "devtools", "diffobj", "digest",
"downlit", "dplyr", "dtplyr", "ellipsis", "evaluate", "extrafont",
"extrafontdb", "fansi", "farver", "fastmap", "fontawesome", "forcats",
"fs", "gargle", "generics", "gert", "ggplot2", "ggplot2movies",
"gh", "gitcreds", "globals", "glue", "golem", "googledrive",
"googlesheets4", "gtable", "haven", "here", "highr", "htmltools",
"htmlwidgets", "httpuv", "httr", "httr2", "ids", "ini", "isoband",
"janitor", "jquerylib", "jsonlite", "kableExtra", "knitr", "labeling",
"later", "lattice", "lazyeval", "leprechaun", "lifecycle", "lintr",
"logger", "lubridate", "magrittr", "markdown", "memoise",
"mime", "miniUI", "modelr", "munsell", "nlme", "openssl", "packer",
"palmerpenguins", "parsedate", "pillar", "pingr", "pkgbuild",
"pkgconfig", "pkgdown", "pkgload", "png", "praise", "prettyunits",
"processx", "profvis", "promises", "proto", "ps", "purrr", "R.cache",
"R.methodsS3", "R.oo", "R.utils", "R6", "ragg", "rappdirs", "rcmdcheck",
"RColorBrewer", "Rcpp", "readxl", "rematch", "rematch2", "remotes",
"reprex", "rex", "rhino", "rhub", "rlang", "rmarkdown", "roxygen2",
"rprojroot", "rstudioapi", "Rttf2pt1", "rversions", "rvest",
"sass", "scales", "selectr", "sessioninfo", "shiny", "shinytest",
"shinytest2", "showimage", 'skimr', "sloop", "sourcetools", "stringi",
"stringr", "styler", "survival", "svglite", "sys", "systemfonts",
"testthat", "textshaping", "tibble", "tidyr", "timechange", "tinytex",
"urlchecker", "usethis", "utf8", "uuid", "vctrs", "vdiffr", "viridisLite",
"waldo", "webdriver", "webshot", "websocket", "whisker", "whoami",
"withr", "xfun", "xml2", "xmlparsedata", "xopen", "xtable", "yaml",
"zip")
install.packages(pkgs)
renv::snapshot()
library(janitor)
devtools::load_all(".")
library(utap)
pkgdown::build_site_github_pages()
install.packages("remotes")
options(repos = "https://cran.rstudio.com/")
devtools::load_all(".")
renv::snapshot()
devtools::load_all(".")
library(utap)
pkgdown::build_site_github_pages()
install.packages("lobstr")
library(lobstr)
renv::snapshot()
devtools::load_all(".")
renv::status()
renv::snapshot()
devtools::load_all(".")
library(utap)
pkgdown::build_site_github_pages()
