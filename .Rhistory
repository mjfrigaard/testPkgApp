#'
#' @return zeallot assignment (`%<-%`) with input character vector on LHS and
#'    list of names by type on the RHS
#'
#' @export make_ui_inputs
#'
#' @examples
#' require(dplyr)
#' make_ui_inputs(dplyr::starwars)
make_ui_inputs <- function(app_data) {
ui_inputs <- names(col_type_list(df = app_data))
lhs_out <- deconstruct(x = ui_inputs)
zeallot_operator <- deconstruct(x = "%<-%")
rhs_out <- deconstruct(x = col_type_list(df = app_data))
cat(lhs_out, %<-%, rhs_out)
#' @param app_data dataset for app (`data.frame` or `tibble`)
#'
#' @return zeallot assignment (`%<-%`) with input character vector on LHS and
#'    list of names by type on the RHS
#'
#' @export make_ui_inputs
#'
#' @examples
#' require(dplyr)
#' make_ui_inputs(dplyr::starwars)
make_ui_inputs <- function(app_data) {
ui_inputs <- names(col_type_list(df = app_data))
lhs_out <- deconstruct(x = ui_inputs)
zeallot_operator <- deconstruct(x = "%<-%")
rhs_out <- deconstruct(x = col_type_list(df = app_data))
cat(lhs_out, '%<-%', rhs_out)
}
make_ui_inputs(dplyr::starwars)
#' @param app_data dataset for app (`data.frame` or `tibble`)
#'
#' @return zeallot assignment (`%<-%`) with input character vector on LHS and
#'    list of names by type on the RHS
#'
#' @export make_ui_inputs
#'
#' @examples
#' require(dplyr)
#' make_ui_inputs(dplyr::starwars)
make_ui_inputs <- function(app_data) {
ui_inputs <- names(col_type_list(df = app_data))
lhs_out <- deconstruct(x = ui_inputs)
zeallot_operator <- deconstruct(x = "%<-%")
rhs_out <- deconstruct(x = col_type_list(df = app_data))
cat(lhs_out, noquote('%<-%'), rhs_out)
}
make_ui_inputs(dplyr::starwars)
#' with `base::noquote()`. If `TRUE`, output is returned with `cat()`
#'
#' @return Deparsed object
#' @export deconstruct
#'
#' @examples
#' x <- deconstruct(names(mtcars), return = TRUE)
#' x
#' deconstruct(names(mtcars))
deconstruct <- function(x, return = FALSE, quote) {
raw_obj <- capture.output(dput(x, control = "all"))
if (isTRUE(quote)) {
obj_quote <- gsub(pattern = '"', replacement = "'", x = raw_obj)
decon_obj <- paste0(obj_quote, collapse = "")
} else {
obj_noquote <- gsub(pattern = '"', replacement = "", x = raw_obj)
decon_obj <- paste0(obj_noquote, collapse = "")
}
if (isFALSE(return)) {
base::cat(decon_obj)
} else {
return(noquote(decon_obj))
}
x <- deconstruct(names(mtcars), return = TRUE)
#' with `base::noquote()`. If `TRUE`, output is returned with `cat()`
#'
#' @return Deparsed object
#' @export deconstruct
#'
#' @examples
#' x <- deconstruct(names(mtcars), return = TRUE)
#' x
#' deconstruct(names(mtcars))
deconstruct <- function(x, return = FALSE, quote = TRUE) {
raw_obj <- capture.output(dput(x, control = "all"))
if (isTRUE(quote)) {
obj_quote <- gsub(pattern = '"', replacement = "'", x = raw_obj)
decon_obj <- paste0(obj_quote, collapse = "")
} else {
obj_noquote <- gsub(pattern = '"', replacement = "", x = raw_obj)
decon_obj <- paste0(obj_noquote, collapse = "")
}
if (isFALSE(return)) {
base::cat(decon_obj)
} else {
return(noquote(decon_obj))
}
#' with `base::noquote()`. If `TRUE`, output is returned with `cat()`
#'
#' @return Deparsed object
#' @export deconstruct
#'
#' @examples
#' x <- deconstruct(names(mtcars), return = TRUE)
#' x
#' deconstruct(names(mtcars))
deconstruct <- function(x, return = FALSE, quote = TRUE) {
raw_obj <- capture.output(dput(x, control = "all"))
if (isFALSE(quote)) {
obj_noquote <- gsub(pattern = '"', replacement = "", x = raw_obj)
decon_obj <- paste0(obj_noquote, collapse = "")
} else {
obj_quote <- gsub(pattern = '"', replacement = "'", x = raw_obj)
decon_obj <- paste0(obj_quote, collapse = "")
}
if (isFALSE(return)) {
base::cat(decon_obj)
} else {
return(noquote(decon_obj))
}
x <- deconstruct(names(mtcars), return = TRUE)
x
deconstruct(names(mtcars))
deconstruct(names(mtcars), quote = FALSE)
make_ui_inputs <- function(app_data) {
ui_inputs <- names(col_type_list(df = app_data))
lhs_out <- deconstruct(x = ui_inputs, return = TRUE)
zeallot_operator <- deconstruct(x = "%<-%", return = TRUE, quote = FALSE)
rhs_out <- deconstruct(x = col_type_list(df = app_data), return = TRUE)
cat(lhs_out, zeallot_operator, rhs_out)
}
make_ui_inputs(dplyr::starwars)
c('double_vars', 'integer_vars', 'character_vars', 'list_vars') %<-% list(double_vars = c('mass', 'birth_year'), integer_vars = 'height',     character_vars = c('name', 'hair_color', 'skin_color', 'eye_color',     'sex', 'gender', 'homeworld', 'species'), list_vars = c('films',     'vehicles', 'starships'))
c('double_vars', 'integer_vars', 'character_vars', 'list_vars') %<-% list(
double_vars = c('mass', 'birth_year'),
integer_vars = 'height',
character_vars = c(
'name',
'hair_color',
'skin_color',
'eye_color',
'sex',
'gender',
'homeworld',
'species'),
list_vars = c('films', 'vehicles', 'starships'))
#' @param app_data dataset for app (`data.frame` or `tibble`)
#'
#' @return zeallot assignment (`%<-%`) with input character vector on LHS and
#'    list of names by type on the RHS
#'
#' @export make_ui_inputs
#'
#' @examples
#' require(dplyr)
#' make_ui_inputs(dplyr::starwars)
make_ui_inputs <- function(app_data) {
ui_inputs <- names(col_type_list(df = app_data))
lhs_out <- deconstruct(x = ui_inputs, return = TRUE, quote = FALSE)
zeallot_operator <- deconstruct(x = "%<-%", return = TRUE, quote = FALSE)
rhs_out <- deconstruct(x = col_type_list(df = app_data), return = TRUE)
cat(lhs_out, zeallot_operator, rhs_out)
}
make_ui_inputs(dplyr::starwars)
c(double_vars, integer_vars, character_vars, list_vars) %<-% list(
double_vars = c('mass', 'birth_year'),
integer_vars = 'height',
character_vars = c(
'name',
'hair_color',
'skin_color',
'eye_color',
'sex',
'gender',
'homeworld',
'species'
),
list_vars = c('films',     'vehicles', 'starships')
)
#' with `base::noquote()`. If `TRUE`, output is returned with `cat()`
#'
#' @return Deparsed object
#' @export deconstruct
#'
#' @examples
#' x <- deconstruct(names(mtcars), return = TRUE)
#' x
#' deconstruct(names(mtcars))
deconstruct <- function(x, return = FALSE, quote = TRUE) {
raw_obj <- capture.output(dput(x, control = "all"))
if (isFALSE(quote)) {
obj_noquote <- gsub(pattern = '"', replacement = "", x = raw_obj)
decon_noquote <- paste0(obj_noquote, collapse = "")
decon_obj <- stringr::str_trim(string = decon_noquote, side = "both")
} else {
obj_quote <- gsub(pattern = '"', replacement = "'", x = raw_obj)
decon_quote <- paste0(obj_quote, collapse = "")
decon_obj <- stringr::str_trim(string = decon_quote, side = "both")
}
if (isFALSE(return)) {
base::cat(decon_obj)
} else {
return(noquote(decon_obj))
}
#' @param app_data dataset for app (`data.frame` or `tibble`)
#'
#' @return zeallot assignment (`%<-%`) with input character vector on LHS and
#'    list of names by type on the RHS
#'
#' @export make_ui_inputs
#'
#' @examples
#' require(dplyr)
#' make_ui_inputs(dplyr::starwars)
make_ui_inputs <- function(app_data) {
ui_inputs <- names(col_type_list(df = app_data))
lhs_out <- deconstruct(x = ui_inputs, return = TRUE, quote = FALSE)
zeallot_operator <- deconstruct(x = "%<-%", return = TRUE, quote = FALSE)
rhs_out <- deconstruct(x = col_type_list(df = app_data), return = TRUE)
cat(lhs_out, zeallot_operator, rhs_out)
}
make_ui_inputs(dplyr::starwars)
#' with `base::noquote()`. If `TRUE`, output is returned with `cat()`
#'
#' @return Deparsed object
#' @export deconstruct
#'
#' @examples
#' x <- deconstruct(names(mtcars), return = TRUE)
#' x
#' deconstruct(names(mtcars))
deconstruct <- function(x, return = FALSE, quote = TRUE) {
raw_obj <- capture.output(dput(x, control = "all"))
if (isFALSE(quote)) {
obj_noquote <- gsub(pattern = '"', replacement = "", x = raw_obj)
decon_noquote <- paste0(obj_noquote, collapse = "")
decon_obj <- gsub("\\s+"," ", decon_noquote)
} else {
obj_quote <- gsub(pattern = '"', replacement = "'", x = raw_obj)
decon_quote <- paste0(obj_quote, collapse = "")
decon_obj <- gsub("\\s+"," ", decon_quote)
}
if (isFALSE(return)) {
base::cat(decon_obj)
} else {
return(noquote(decon_obj))
}
#' @param app_data dataset for app (`data.frame` or `tibble`)
#'
#' @return zeallot assignment (`%<-%`) with input character vector on LHS and
#'    list of names by type on the RHS
#'
#' @export make_ui_inputs
#'
#' @examples
#' require(dplyr)
#' make_ui_inputs(dplyr::starwars)
make_ui_inputs <- function(app_data) {
ui_inputs <- names(col_type_list(df = app_data))
lhs_out <- deconstruct(x = ui_inputs, return = TRUE, quote = FALSE)
zeallot_operator <- deconstruct(x = "%<-%", return = TRUE, quote = FALSE)
rhs_out <- deconstruct(x = col_type_list(df = app_data), return = TRUE)
cat(lhs_out, zeallot_operator, rhs_out)
}
make_ui_inputs(dplyr::starwars)
c(double_vars, integer_vars, character_vars, list_vars) %<-% list(
double_vars = c('mass', 'birth_year'),
integer_vars = 'height',
character_vars = c(
'name',
'hair_color',
'skin_color',
'eye_color',
'sex',
'gender',
'homeworld',
'species'
),
list_vars = c('films', 'vehicles', 'starships')
)
c(double_vars, integer_vars, character_vars, list_vars) %<-% list(
double_vars = c('mass', 'birth_year'),
integer_vars = 'height',
character_vars = c(
'name',
'hair_color',
'skin_color',
'eye_color',
'sex',
'gender',
'homeworld',
'species'
),
list_vars = c('films', 'vehicles', 'starships')
)
create_test_data <- function() {
data.frame(
col_a = c(1, 2, 3),
col_b = c("A", "B", "C"),
col_c = as.factor(c("X", "Y", "Z")))
}
test_data <- create_test_data()
class(make_ui_inputs(test_data))
make_ui_inputs(test_data)
devtools::load_all()
devtools::document()
library(testPkgApp)
create_test_data <- function() {
data.frame(
col_a = c(1, 2, 3),
col_b = c("A", "B", "C"),
col_c = as.factor(c("X", "Y", "Z")))
}
test_data <- create_test_data()
test_data
cat_output <- capture.output(output = make_ui_inputs(test_data))
cat_output
# Create an empty data frame
empty_data <- data.frame()
make_ui_inputs(empty_data)
testthat::test_file("tests/testthat/test-make_ui_inputs.R")
testthat::test_file("tests/testthat/test-deconstruct.R")
testthat::test_file("tests/testthat/test-make_ui_inputs.R")
# Create a sample data frame
col_type_test <- tibble::tibble(
a = c(1, 2, 3, 4, 5, 6),
b = c("A", "B", "C", "D", "E", "F"),
c = c(TRUE, TRUE, FALSE, FALSE, TRUE, TRUE),
d = as.Date(c(
"2023-01-01",
"2023-01-02",
"2023-01-03",
"2023-01-04",
"2023-01-05",
"2023-01-06")
),
e = as.POSIXct(c(
"2023-01-01",
"2023-01-02",
"2023-01-03",
"2023-01-04",
"2023-01-05",
"2023-01-06")
),
# test binary
f = factor(sample(x = c("high", "low",
"high", "low",
NA_character_),
size = 6, replace = TRUE),
levels = c("low", "high"),
ordered = TRUE),
# test facet
g = factor(sample(x = c("very low", "low", "medium",
"high", "very high", NA_character_),
size = 6, replace = TRUE),
levels = c("very low", "low", "medium",
"high", "very high"),
ordered = TRUE))
col_type_list(col_type_test)
dput(col_type_list(col_type_test))
testthat::test_file("tests/testthat/test-col_type_list.R")
# Create a sample data frame
col_type_test_01 <- tibble::tibble(
a = c(1, 2, 3, 4, 5, 6),
b = c("A", "B", "C", "D", "E", "F"),
c = c(TRUE, TRUE, FALSE, FALSE, TRUE, TRUE))
col_type_test_02 <- tibble::tibble(
d = as.Date(c(
"2023-01-01",
"2023-01-02",
"2023-01-03",
"2023-01-04",
"2023-01-05",
"2023-01-06")
),
e = as.POSIXct(c(
"2023-01-01",
"2023-01-02",
"2023-01-03",
"2023-01-04",
"2023-01-05",
"2023-01-06")
))
col_type_test_03 <- tibble::tibble(
# test binary
f = factor(sample(x = c("high", "low",
"high", "low",
NA_character_),
size = 6, replace = TRUE),
levels = c("low", "high"),
ordered = TRUE),
# test facet
g = factor(sample(x = c("very low", "low", "medium",
"high", "very high", NA_character_),
size = 6, replace = TRUE),
levels = c("very low", "low", "medium",
"high", "very high"),
ordered = TRUE))
dput(col_type_list(col_type_test_01)
)
dput(col_type_list(col_type_test_02))
dput(col_type_list(col_type_test_03))
testthat::test_file("tests/testthat/test-col_type_list.R")
col_type_list(col_type_test_04)
col_type_test_04 <- tibble::tibble(
# single list column
lst_01 = list(
# three level factor (with missing)
fct_03 = factor(x = sample(c("group 1", "group 2", "group 3",
NA_character_),
size = 100, replace = TRUE),
levels = c("group 1", "group 2", "group 3")),
# three level factor, with only two levels represented (with missing)
fct_04 = factor(x = sample(c("group x", "group y", NA_character_),
size = 100, replace = TRUE),
levels = c("group x", "group y",
"group z"))))
col_type_list(col_type_test_04)
dput(col_type_list(col_type_test_04))
testthat::test_file("tests/testthat/test-col_type_list.R")
testthat::test_file("tests/testthat/test-app_inputs.R")
testthat::test_file("tests/testthat/test-deconstruct.R")
testthat::test_file("tests/testthat/test-make_ui_inputs.R")
devtools::load_all()
devtools::document()
# run utility function tests ----------------------------------------------
testthat::test_file("tests/testthat/test-binary_vars.R")
devtools::load_all()
devtools::document()
# run utility function tests ----------------------------------------------
testthat::test_file("tests/testthat/test-binary_vars.R")
library(testPkgApp)
# run utility function tests ----------------------------------------------
testthat::test_file("tests/testthat/test-binary_vars.R")
binary_checks <- function(x, type) {
check_log_binary <- function(x) { all(na.omit(x) %in% TRUE:FALSE) }
check_int_binary <- function(x) { all(na.omit(x) %in% 0:1) }
check_chr_binary <- function(x) { length(unique(na.omit(x))) == 2 }
check_fct_binary <- function(x) { length(levels(na.omit(x))) == 2 }
switch(type,
log = check_log_binary(x),
int = check_int_binary(x),
chr = check_chr_binary(x),
fct = check_fct_binary(x))
}
binary_checks(x = sample(c(TRUE, FALSE), 10, TRUE), type = "log")
binary_checks(rep(LETTERS[1:5], times = 2), type = "chr")
# run utility function tests ----------------------------------------------
testthat::test_file("tests/testthat/test-binary_vars.R")
devtools::load_all()
devtools::document()
chr_vars_test <- tibble::tibble(
# character 2 unique (with missing values)
chr_02 = sample(x = c("YES", "NO",
"YES", "NO", NA_character_),
size = 100, replace = TRUE),
# character 3 unique (with missing values)
chr_03 = sample(c("YES", "NO",
"MAYBE", NA_character_),
size = 100, replace = TRUE))
binary_vars(chr_vars_test)
ord_vars_test <- tibble::tibble(
# tests for two level ordered factor (with missing)
ord_02 = factor(sample(x = c("high", "low",
"high", "low",
NA_character_),
size = 100, replace = TRUE),
levels = c("low", "high"),
ordered = TRUE),
# tests for three level ordered factor (with missing)
ord_03 = factor(sample(x = c("small", "medium",
"large", NA_character_),
size = 100, replace = TRUE),
levels = c("small", "medium", "large"),
ordered = TRUE))
binary_vars(ord_vars_test)
fct_vars_test <- tibble::tibble(
# two level factor (with missing)
fct_02 = factor(sample(x = c("group a", "group b",
"group a", "group b",
NA_character_),
size = 100, replace = TRUE),
levels = c("group a", "group b")),
# three level factor (with missing)
fct_03 = factor(x = sample(c("group 1", "group 2", "group 3",
NA_character_),
size = 100, replace = TRUE),
levels = c("group 1", "group 2", "group 3")),
# three level factor, with only two levels represented (with missing)
fct_04 = factor(x = sample(c("group x", "group y", NA_character_),
size = 100, replace = TRUE),
levels = c("group x", "group y",
"group z")))
binary_vars(fct_vars_test)
list_cols_test <- tibble::tibble(
# single list column
lst_01 = list(
# three level factor (with missing)
fct_03 = factor(x = sample(c("group 1", "group 2", "group 3",
NA_character_),
size = 100, replace = TRUE),
levels = c("group 1", "group 2", "group 3")),
# three level factor, with only two levels represented (with missing)
fct_04 = factor(x = sample(c("group x", "group y", NA_character_),
size = 100, replace = TRUE),
levels = c("group x", "group y",
"group z"))))
binary_vars(list_cols_test)
# run utility function tests ----------------------------------------------
testthat::test_file("tests/testthat/test-binary_vars.R")
library(testPkgApp)
