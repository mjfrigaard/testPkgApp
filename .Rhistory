FCT_VAR = factor(CHR_VAR,
levels = c("L", "M", "H")))
data.frame(LOG_VAR = c(TRUE, FALSE, NA),
INT_VAR = c(1L, 2L, 3L),
DBL_VAR = c(1.1, 2.2, 3.3),
CHR_VAR = c("H", "L", "M"),
FCT_VAR = factor(c("H", "L", "M"),
levels = c("L", "M", "H")))
tibble::tibble(LOG_VAR = c(TRUE, FALSE, NA),
INT_VAR = c(1L, 2L, 3L),
DBL_VAR = c(1.1, 2.2, 3.3),
CHR_VAR = c("H", "L", "M"),
FCT_VAR = factor(c("H", "L", "M"),
levels = c("L", "M", "H")))
tibble::tibble(LOG_VAR = c(TRUE, FALSE, NA),
INT_VAR = c(1L, 2L, 3L),
DBL_VAR = c(1.1, 2.2, 3.3),
CHR_VAR = c("H", "L", "M"),
FCT_VAR = factor(CHR_VAR,
levels = c("L", "M", "H")))
tibble::tibble(LOG_VAR = c(TRUE, FALSE, NA),
INT_VAR = c(1L, 2L, 3L),
DBL_VAR = c(1.1, 2.2, 3.3),
CHR_VAR = c("H", "L", "M"),
FCT_VAR = factor(CHR_VAR,
levels = c("L", "M", "H")),)
tibble::tibble(LOG_VAR = c(TRUE, FALSE, NA),
INT_VAR = c(1L, 2L, 3L),
DBL_VAR = c(1.1, 2.2, 3.3),
CHR_VAR = c("H", "L", "M"),
FCT_VAR = factor(CHR_VAR,
levels = c("L", "M", "H")),
ORD_VAR = factor(CHR_VAR,
levels = c("L", "M", "H"),
ordered = TRUE))
LETTERS[1:10]
tibble::tibble(LOG_VAR = sample(c(TRUE, FALSE, NA), 10, TRUE),
INT_VAR = sample(c(1L, 2L, 3L), 10, TRUE),
DBL_VAR = rnorm(n = 10, mean = 5, sd = 2),
CHR_VAR = sample(LETTERS[1:10], 10, TRUE),
FCT_VAR = factor(CHR_VAR,
levels = LETTERS[1:10]),
ORD_VAR = factor(CHR_VAR,
levels = LETTERS[1:10],
ordered = TRUE))
test_file("tests/testthat/test-mod_vars_server.R")
source("~/projects/apps/tsap/tests/testthat/helper.R")
test_data <- tibble::tibble(
LOG_VAR = log_maker(size = 10, missing = TRUE),
INT_VAR = int_maker(size = 10, missing = TRUE),
DBL_VAR = dbl_maker(size = 10, missing = TRUE),
CHR_VAR = chr_maker(size = 10, lvls = 4, missing = FALSE),
FCT_VAR = fct_maker(size = 10, lvls = 4, missing = FALSE),
ORD_VAR = ord_maker(size = 10, lvls = 4, missing = FALSE))
test_data
source("~/projects/apps/tsap/tests/testthat/helper.R")
test_file("tests/testthat/test-mod_vars_server.R")
names(test_data) <- names(test_data)
test_data
names(test_data)
setNames(object = names(test_data), nm = names(test_data))
setNames(c("INT_VAR", "DBL_VAR"), nm = c("INT_VAR", "DBL_VAR"))
setNames(nm = c("First", "2nd"))
setNames(nm = c("INT_VAR", "DBL_VAR"))
test_file("tests/testthat/test-mod_vars_server.R")
test_data <- tibble::tibble(
LOGV = log_maker(size = 6),
INTV = int_maker(size = 6),
DBLV = dbl_maker(size = 6),
CHRV = chr_maker(size = 6, lvls = 4),
FCTV = fct_maker(size = 6, lvls = 4),
ORDV = ord_maker(size = 6, lvls = 4))
test_data
# create test data
test_data <- tibble::tibble(
LOG = log_maker(size = 6),
INT = int_maker(size = 6),
DBL = dbl_maker(size = 6),
CHR = chr_maker(size = 6, lvls = 4),
FCT = fct_maker(size = 6, lvls = 4),
ORD = ord_maker(size = 6, lvls = 4))
test_data
test_file("tests/testthat/test-mod_vars_server.R")
fs::dir_tree("tests")
fs::dir_tree("tests/testthat/fixtures/")
col_classes <- tibble::tibble(
log_na = log_maker(size = 10, missing = TRUE),
log_var = log_maker(size = 10),
int_na = int_maker(size = 10, missing = TRUE),
int_var = int_maker(size = 10),
dbl_na = dbl_maker(10, missing = TRUE),
dbl_var = dbl_maker(size = 10),
chr_na = chr_maker(size = 10, lvls = 4, missing = TRUE),
chr_var = chr_maker(size = 10, lvls = 4),
fct_na = fct_maker(size = 10, lvls = 5, missing = TRUE),
fct_var = fct_maker(size = 10, lvls = 5),
ord_na = ord_maker(size = 10, lvls = 5, missing = TRUE),
ord_fct = ord_maker(size = 10, lvls = 5)
)
# export to tests/testthat/fixtures/
saveRDS(col_classes,
file = "tests/testthat/fixtures/col_classes.rds"
)
cols_types <- tibble::tibble(
# double ----
dbl_var_na = dbl_maker(10, missing = TRUE),
dbl_var = dbl_maker(size = 10),
# integer ----
int_var_na = int_maker(10, missing = TRUE),
int_var = int_maker(size = 10),
# character
chr_var_na = chr_maker(
size = 10, missing = TRUE
),
chr_var = chr_maker(size = 10),
# logical binary ----
log_bin_na = bin_maker(
bin_type = "log",
size = 10, missing = TRUE
),
log_bin = bin_maker(
bin_type = "log",
size = 10, missing = FALSE
),
# integer binary ----
int_bin_na = bin_maker(
bin_type = "int",
size = 10, missing = TRUE
),
int_bin = bin_maker(
bin_type = "int",
size = 10, missing = FALSE
),
# character binary ----
chr_bin_na = bin_maker(
bin_type = "chr",
size = 10, missing = TRUE
),
chr_bin = bin_maker(
bin_type = "chr",
size = 10, missing = FALSE
),
chr_bin2_na = chr_maker(
size = 10,
lvls = 1, missing = TRUE
),
# 5-level ----
# factor
fct5_var_na = fct_maker(
size = 10,
lvls = 5, missing = TRUE
),
fct5_var = fct_maker(size = 10, lvls = 5),
# ordered
ord5_var_na = ord_maker(
size = 10, lvls = 5,
missing = TRUE
),
ord5_var = ord_maker(
size = 10,
lvls = 5
),
# 4-level ----
# character facets
chr_facet4 = facet_maker(
facet_type = "chr", size = 10,
lvls = 4, missing = FALSE
),
chr_facet4_na = facet_maker(
facet_type = "chr", size = 10,
lvls = 4, missing = TRUE
),
# factor facets
fct_facet4 = facet_maker(
facet_type = "fct", size = 10,
lvls = 4, missing = FALSE
),
fct_facet4_na = facet_maker(
facet_type = "fct", size = 10,
lvls = 4, missing = TRUE
),
# ordered facets
ord_facet4 = facet_maker(
facet_type = "ord", size = 10,
lvls = 4, missing = FALSE
),
ord_facet4_na = facet_maker(
facet_type = "ord", size = 10,
lvls = 4, missing = TRUE
)
# export to tests/testthat/fixtures/
saveRDS(cols_types,
file = "tests/testthat/fixtures/cols_types.rds"
)
test_cols_data <- tibble::tibble(
log_var = c(TRUE, FALSE, TRUE),
int_var = c(1L, 2L, 3L),
dbl_var = c(1.1, 2.2, 3.3),
chr_var = c("item:1", "item:2", "item:3"),
fct_var = factor(
c("group 1", "group 2", "group 3"),
levels = c(
"group 1", "group 2", "group 3")),
ord_var = factor(
c("level 1", "level 2", "level 3"),
levels = c("level 1", "level 2", "level 3"),
ordered = TRUE),
list_var = list(
log_vec = c(TRUE, FALSE),
dbl_vec = c(1.1, 2.2),
chr_var = c("item:1", "item:2")))
saveRDS(object = test_cols_data, "tests/testthat/fixtures/test_cols_data.rds")
col_types <- tibble::tibble(
# double ----
dbl_var_na = dbl_maker(10, missing = TRUE),
dbl_var = dbl_maker(size = 10),
# integer ----
int_var_na = int_maker(10, missing = TRUE),
int_var = int_maker(size = 10),
# character
chr_var_na = chr_maker(
size = 10, missing = TRUE
),
chr_var = chr_maker(size = 10),
# logical binary ----
log_bin_na = bin_maker(
bin_type = "log",
size = 10, missing = TRUE
),
log_bin = bin_maker(
bin_type = "log",
size = 10, missing = FALSE
),
# integer binary ----
int_bin_na = bin_maker(
bin_type = "int",
size = 10, missing = TRUE
),
int_bin = bin_maker(
bin_type = "int",
size = 10, missing = FALSE
),
# character binary ----
chr_bin_na = bin_maker(
bin_type = "chr",
size = 10, missing = TRUE
),
chr_bin = bin_maker(
bin_type = "chr",
size = 10, missing = FALSE
),
chr_bin2_na = chr_maker(
size = 10,
lvls = 1, missing = TRUE
),
# 5-level ----
# factor
fct5_var_na = fct_maker(
size = 10,
lvls = 5, missing = TRUE
),
fct5_var = fct_maker(size = 10, lvls = 5),
# ordered
ord5_var_na = ord_maker(
size = 10, lvls = 5,
missing = TRUE
),
ord5_var = ord_maker(
size = 10,
lvls = 5
),
# 4-level ----
# character facets
chr_facet4 = facet_maker(
facet_type = "chr", size = 10,
lvls = 4, missing = FALSE
),
chr_facet4_na = facet_maker(
facet_type = "chr", size = 10,
lvls = 4, missing = TRUE
),
# factor facets
fct_facet4 = facet_maker(
facet_type = "fct", size = 10,
lvls = 4, missing = FALSE
),
fct_facet4_na = facet_maker(
facet_type = "fct", size = 10,
lvls = 4, missing = TRUE
),
# ordered facets
ord_facet4 = facet_maker(
facet_type = "ord", size = 10,
lvls = 4, missing = FALSE
),
ord_facet4_na = facet_maker(
facet_type = "ord", size = 10,
lvls = 4, missing = TRUE
)
# export to tests/testthat/fixtures/
saveRDS(col_types,
file = "tests/testthat/fixtures/colÃŸ_types.rds"
)
col_types <- tibble::tibble(
# double ----
dbl_var_na = dbl_maker(10, missing = TRUE),
dbl_var = dbl_maker(size = 10),
# integer ----
int_var_na = int_maker(10, missing = TRUE),
int_var = int_maker(size = 10),
# character
chr_var_na = chr_maker(
size = 10, missing = TRUE
),
chr_var = chr_maker(size = 10),
# logical binary ----
log_bin_na = bin_maker(
bin_type = "log",
size = 10, missing = TRUE
),
log_bin = bin_maker(
bin_type = "log",
size = 10, missing = FALSE
),
# integer binary ----
int_bin_na = bin_maker(
bin_type = "int",
size = 10, missing = TRUE
),
int_bin = bin_maker(
bin_type = "int",
size = 10, missing = FALSE
),
# character binary ----
chr_bin_na = bin_maker(
bin_type = "chr",
size = 10, missing = TRUE
),
chr_bin = bin_maker(
bin_type = "chr",
size = 10, missing = FALSE
),
chr_bin2_na = chr_maker(
size = 10,
lvls = 1, missing = TRUE
),
# 5-level ----
# factor
fct5_var_na = fct_maker(
size = 10,
lvls = 5, missing = TRUE
),
fct5_var = fct_maker(size = 10, lvls = 5),
# ordered
ord5_var_na = ord_maker(
size = 10, lvls = 5,
missing = TRUE
),
ord5_var = ord_maker(
size = 10,
lvls = 5
),
# 4-level ----
# character facets
chr_facet4 = facet_maker(
facet_type = "chr", size = 10,
lvls = 4, missing = FALSE
),
chr_facet4_na = facet_maker(
facet_type = "chr", size = 10,
lvls = 4, missing = TRUE
),
# factor facets
fct_facet4 = facet_maker(
facet_type = "fct", size = 10,
lvls = 4, missing = FALSE
),
fct_facet4_na = facet_maker(
facet_type = "fct", size = 10,
lvls = 4, missing = TRUE
),
# ordered facets
ord_facet4 = facet_maker(
facet_type = "ord", size = 10,
lvls = 4, missing = FALSE
),
ord_facet4_na = facet_maker(
facet_type = "ord", size = 10,
lvls = 4, missing = TRUE
)
# export to tests/testthat/fixtures/
saveRDS(col_types,
file = "tests/testthat/fixtures/col_types.rds"
)
test_col_data <- tibble::tibble(
log_var = c(TRUE, FALSE, TRUE),
int_var = c(1L, 2L, 3L),
dbl_var = c(1.1, 2.2, 3.3),
chr_var = c("item:1", "item:2", "item:3"),
fct_var = factor(
c("group 1", "group 2", "group 3"),
levels = c(
"group 1", "group 2", "group 3")),
ord_var = factor(
c("level 1", "level 2", "level 3"),
levels = c("level 1", "level 2", "level 3"),
ordered = TRUE),
list_var = list(
log_vec = c(TRUE, FALSE),
dbl_vec = c(1.1, 2.2),
chr_var = c("item:1", "item:2")))
saveRDS(object = test_col_data, "tests/testthat/fixtures/test_col_data.rds")
devtools::load_all(".")
library(tsap)
test_file("tests/testthat/test-pull_numeric_cols.R")
test_file("tests/testthat/test-pull_cat_cols.R")
install.packages("usethis")
test_file("tests/testthat/test-mod_pkg_server.R")
library(tsap)
devtools::load_all(".")
library(tsap)
test_file("tests/testthat/test-mod_pkg_server.R")
test_file("tests/testthat/test-mod_ds_server.R")
test_file("tests/testthat/test-mod_pkg_server.R")
test_file("tests/testthat/test-mod_ds_server.R")
renv::status()
renv::update()
devtools::load_all(".")
library(tsap)
test_file("tests/testthat/test-mod_pkg_server.R")
get_pkgs_with_dfs()
devtools::load_all(".")
library(tsap)
??get_pkgs_with_dfs
devtools::load_all(".")
library(tsap)
??get_pkgs_with_dfs
devtools::load_all(".")
library(tsap)
mod_pkg_ui("x")
test_file("tests/testthat/test-mod_pkg_server.R")
test_file("tests/testthat/test-mod_ds_server.R")
devtools::load_all(".")
renv::sna
renv::snapshot()
devtools::load_all(".")
library(tsap)
tsap::pkgDataApp()
rsconnect:::appDependencies()
attachment::att_amend_desc()
devtools::load_all(".")
library(tsap)
rsconnect:::appDependencies()
rsconnect:::appDependencies()[['Packages']]
rsconnect:::appDependencies()$Packages
rsconnect:::appDependencies()$Package
rsconnect:::appDependencies()[['Package']]
install.packages('rsconnect')
pkgs <- rsconnect:::appDependencies()[['Package']]
install.packages(pkgs, quiet = TRUE)
install.packages("rsconnect")
check_df_in_pkg("stringr")
check_df_in_pkg("dplyr")
devtools::load_all(".")
library(tsap)
install.packages(c("dplyr", "janitor", "shiny"))
install.packages(c("palmerpenguines", "NHANES"))
install.packages(c("palmerpenguins", "NHANES"))
devtools::load_all(".")
install.packages("devtools")
devtools::load_all(".")
library(tsap)
tsap::pkgDataApp()
install.packages('labeling')
library(labeling)
tsap::pkgDataApp()
install.packages('farver')
library(farver)
pkgDataApp()
install.packages('attachment')
library(attachment)
attachment::att_amend_desc()
devtools::load_all(".")
source("~/projects/pkgs/apps/tsap/R/pkgDataApp.R")
devtools::load_all(".")
library(tsap)
pkgDataApp()
check_inst_pkg("plotly")
install.packages(x, dependencies = TRUE)
check_inst_pkg("plotly")
install.packages(x, dependencies = TRUE)
devtools::load_all(".")
library(tsap)
check_inst_pkg("plotly")
devtools::load_all(".")
library(tsap)
check_inst_pkg("plotly")
install.packages(pkg, dependencies = TRUE)
check_inst_pkg("base")
devtools::load_all(".")
library(tsap)
check_inst_pkg("base")
check_inst_pkg("plotly")
install.packages(pkg, quiet = TRUE, verbose = FALSE)
check_inst_pkg("plotly")
install.packages(pkg, quiet = TRUE, verbose = FALSE)
devtools::load_all(".")
library(tsap)
pkgDataApp()
devtools::load_all(".")
library(utap)
pkgdown::build_site_github_pages()
