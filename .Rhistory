library(shiny)
library(NHANES)
library(Lahman)
library(testPkgApp)
library(skimr)
test_app_inputs <- function(data) {
# data
app_data <- data
# ui
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
num_app_inputs(df = app_data)
),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
selected_df <- dplyr::select(
app_data,
dplyr::all_of(
c(input$x, input$y,input$color, input$facet)
)) |>
purrr::set_names(c(
"num_app_inputs_x", "num_app_inputs_y",
"binary_app_inputs", "facet_app_inputs"))
skimr::skim(selected_df)
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = Lahman::People)
library(shiny)
library(NHANES)
library(Lahman)
library(testPkgApp)
library(skimr)
test_app_inputs <- function(data) {
# data
app_data <- data
# ui
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
num_app_inputs(df = app_data)
),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
selected_df <- dplyr::select(
app_data,
dplyr::any_of(
c(input$x, input$y,input$color, input$facet)
)) |>
purrr::set_names(c(
"num_app_inputs_x", "num_app_inputs_y",
"binary_app_inputs", "facet_app_inputs"))
skimr::skim(selected_df)
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = Lahman::People)
library(shiny)
library(NHANES)
library(Lahman)
library(testPkgApp)
library(skimr)
test_app_inputs <- function(data) {
# data
app_data <- data
# ui
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
num_app_inputs(df = app_data)
),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
selected_df <- dplyr::select(
app_data,
dplyr::any_of(
c(input$x, input$y,input$color, input$facet)
))
skimr::skim(selected_df)
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = Lahman::People)
library(shiny)
library(NHANES)
library(testPkgApp)
library(skimr)
test_app_inputs <- function(data) {
# data
app_data <- data
# ui
ui <- shiny::fluidPage(
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
num_app_inputs(df = app_data)
),
selected = num_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "y",
label = "Y-axis:",
choices = num_app_inputs(df = app_data),
selected = num_app_inputs(df = app_data)[2]
),
shiny::selectInput(
inputId = "color",
label = "coloror by:",
choices = binary_app_inputs(df = app_data),
selected = binary_app_inputs(df = app_data)[1]
),
shiny::selectInput(
inputId = "facet",
label = "Facet by:",
choices = facet_app_inputs(df = app_data),
selected = facet_app_inputs(df = app_data)[1]
)
),
shiny::mainPanel(
h3("Testing app inputs"),
shiny::br(),
shiny::verbatimTextOutput(outputId = "selected")
)
# server
server <- function(input, output, session) {
output$selected <- shiny::renderPrint({
selected_df <- dplyr::select(
app_data,
dplyr::any_of(
c(input$x, input$y,input$color, input$facet)
)) |>
purrr::set_names(c(
"num_app_inputs_x", "num_app_inputs_y",
"binary_app_inputs", "facet_app_inputs"))
skimr::skim(selected_df)
}) |>
shiny::bindEvent(c(input$x, input$y,
input$color, input$facet))
}
# run
shiny::shinyApp(ui = ui, server = server)
}
# run
test_app_inputs(data = NHANES::NHANES)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(testPkgApp)
test_app_inputs()
test_app_inputs(NHANES::NHANES)
renv::status()
renv::snapshot()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(testPkgApp)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
#| echo: false
fs::dir_tree("tests/testthat/", regexp = "^tests/testthat/test-")
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(testPkgApp)
renv::status()
renv::snapshot()
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
renv::status()
install.packages("yaml")
renv::snapshot()
pkgs <- c("AsioHeaders", "askpass", "assertthat", "attempt", "backports",
"base64enc", "blob", "box", "brew", "brio", "broom", "bslib",
"cachem", "callr", "cellranger", "checkmate", "chromote", "cli",
"clipr", "colorspace", "commonmark", "config", "conflicted",
"cpp11", "crayon", "credentials", "curl", "cyclocomp", "data.table",
"DBI", "dbplyr", "debugme", "desc", "devtools", "diffobj", "digest",
"downlit", "dplyr", "dtplyr", "ellipsis", "evaluate", "extrafont",
"extrafontdb", "fansi", "farver", "fastmap", "fontawesome", "forcats",
"fs", "gargle", "generics", "gert", "ggplot2", "ggplot2movies",
"gh", "gitcreds", "globals", "glue", "golem", "googledrive",
"googlesheets4", "gtable", "haven", "here", "highr", "htmltools",
"htmlwidgets", "httpuv", "httr", "httr2", "ids", "ini", "isoband",
"janitor", "jquerylib", "jsonlite", "kableExtra", "knitr", "labeling",
"later", "lattice", "lazyeval", "leprechaun", "lifecycle", "lintr",
"logger", "lubridate", "magrittr", "markdown", "Matrix", "memoise",
"mime", "miniUI", "modelr", "munsell", "nlme", "openssl", "packer",
"palmerpenguins", "parsedate", "pillar", "pingr", "pkgbuild",
"pkgconfig", "pkgdown", "pkgload", "png", "praise", "prettyunits",
"processx", "profvis", "promises", "proto", "ps", "purrr", "R.cache",
"R.methodsS3", "R.oo", "R.utils", "R6", "ragg", "rappdirs", "rcmdcheck",
"RColorBrewer", "Rcpp", "readxl", "rematch", "rematch2", "remotes",
"reprex", "rex", "rhino", "rhub", "rlang", "rmarkdown", "roxygen2",
"rprojroot", "rstudioapi", "Rttf2pt1", "rversions", "rvest",
"sass", "scales", "selectr", "sessioninfo", "shiny", "shinytest",
"shinytest2", "showimage", "sloop", "sourcetools", "stringi",
"stringr", "styler", "survival", "svglite", "sys", "systemfonts",
"testthat", "textshaping", "tibble", "tidyr", "timechange", "tinytex",
"urlchecker", "usethis", "utf8", "uuid", "vctrs", "vdiffr", "viridisLite",
"waldo", "webdriver", "webshot", "websocket", "whisker", "whoami",
"withr", "xfun", "xml2", "xmlparsedata", "xopen", "xtable", "yaml",
"zip")
renv::install(pkgs)
pkgs <- c("AsioHeaders", "askpass", "assertthat", "attempt", "backports",
"base64enc", "blob", "box", "brew", "brio", "broom", "bslib",
"cachem", "callr", "cellranger", "checkmate", "chromote", "cli",
"clipr", "colorspace", "commonmark", "config", "conflicted",
"cpp11", "crayon", "credentials", "curl", "cyclocomp", "data.table",
"DBI", "dbplyr", "debugme", "desc", "devtools", "diffobj", "digest",
"downlit", "dplyr", "dtplyr", "ellipsis", "evaluate", "extrafont",
"extrafontdb", "fansi", "farver", "fastmap", "fontawesome", "forcats",
"fs", "gargle", "generics", "gert", "ggplot2", "ggplot2movies",
"gh", "gitcreds", "globals", "glue", "golem", "googledrive",
"googlesheets4", "gtable", "haven", "here", "highr", "htmltools",
"htmlwidgets", "httpuv", "httr", "httr2", "ids", "ini", "isoband",
"janitor", "jquerylib", "jsonlite", "kableExtra", "knitr", "labeling",
"later", "lattice", "lazyeval", "leprechaun", "lifecycle", "lintr",
"logger", "lubridate", "magrittr", "markdown", "Matrix", "memoise",
"mime", "miniUI", "modelr", "munsell", "nlme", "openssl", "packer",
"palmerpenguins", "parsedate", "pillar", "pingr", "pkgbuild",
"pkgconfig", "pkgdown", "pkgload", "png", "praise", "prettyunits",
"processx", "profvis", "promises", "proto", "ps", "purrr", "R.cache",
"R.methodsS3", "R.oo", "R.utils", "R6", "ragg", "rappdirs", "rcmdcheck",
"RColorBrewer", "Rcpp", "readxl", "rematch", "rematch2", "remotes",
"reprex", "rex", "rhino", "rhub", "rlang", "rmarkdown", "roxygen2",
"rprojroot", "rstudioapi", "Rttf2pt1", "rversions", "rvest",
"sass", "scales", "selectr", "sessioninfo", "shiny", "shinytest",
"shinytest2", "showimage", "sloop", "sourcetools", "stringi",
"stringr", "styler", "survival", "svglite", "sys", "systemfonts",
"testthat", "textshaping", "tibble", "tidyr", "timechange", "tinytex",
"urlchecker", "usethis", "utf8", "uuid", "vctrs", "vdiffr", "viridisLite",
"waldo", "webdriver", "webshot", "websocket", "whisker", "whoami",
"withr", "xfun", "xml2", "xmlparsedata", "xopen", "xtable", "yaml",
"zip")
renv::install(pkgs)
install.packages("Matrix")
renv::deactivate()
renv::activate()
pkgs <- c("AsioHeaders", "askpass", "assertthat", "attempt", "backports",
"base64enc", "blob", "box", "brew", "brio", "broom", "bslib",
"cachem", "callr", "cellranger", "checkmate", "chromote", "cli",
"clipr", "colorspace", "commonmark", "config", "conflicted",
"cpp11", "crayon", "credentials", "curl", "cyclocomp", "data.table",
"DBI", "dbplyr", "debugme", "desc", "devtools", "diffobj", "digest",
"downlit", "dplyr", "dtplyr", "ellipsis", "evaluate", "extrafont",
"extrafontdb", "fansi", "farver", "fastmap", "fontawesome", "forcats",
"fs", "gargle", "generics", "gert", "ggplot2", "ggplot2movies",
"gh", "gitcreds", "globals", "glue", "golem", "googledrive",
"googlesheets4", "gtable", "haven", "here", "highr", "htmltools",
"htmlwidgets", "httpuv", "httr", "httr2", "ids", "ini", "isoband",
"janitor", "jquerylib", "jsonlite", "kableExtra", "knitr", "labeling",
"later", "lattice", "lazyeval", "leprechaun", "lifecycle", "lintr",
"logger", "lubridate", "magrittr", "markdown", "Matrix", "memoise",
"mime", "miniUI", "modelr", "munsell", "nlme", "openssl", "packer",
"palmerpenguins", "parsedate", "pillar", "pingr", "pkgbuild",
"pkgconfig", "pkgdown", "pkgload", "png", "praise", "prettyunits",
"processx", "profvis", "promises", "proto", "ps", "purrr", "R.cache",
"R.methodsS3", "R.oo", "R.utils", "R6", "ragg", "rappdirs", "rcmdcheck",
"RColorBrewer", "Rcpp", "readxl", "rematch", "rematch2", "remotes",
"reprex", "rex", "rhino", "rhub", "rlang", "rmarkdown", "roxygen2",
"rprojroot", "rstudioapi", "Rttf2pt1", "rversions", "rvest",
"sass", "scales", "selectr", "sessioninfo", "shiny", "shinytest",
"shinytest2", "showimage", "sloop", "sourcetools", "stringi",
"stringr", "styler", "survival", "svglite", "sys", "systemfonts",
"testthat", "textshaping", "tibble", "tidyr", "timechange", "tinytex",
"urlchecker", "usethis", "utf8", "uuid", "vctrs", "vdiffr", "viridisLite",
"waldo", "webdriver", "webshot", "websocket", "whisker", "whoami",
"withr", "xfun", "xml2", "xmlparsedata", "xopen", "xtable", "yaml",
"zip")
# dput(unique(sort(pkgs)))
renv::install(pkgs)
pkgs <- c("AsioHeaders", "askpass", "assertthat", "attempt", "backports",
"base64enc", "blob", "box", "brew", "brio", "broom", "bslib",
"cachem", "callr", "cellranger", "checkmate", "chromote", "cli",
"clipr", "colorspace", "commonmark", "config", "conflicted",
"cpp11", "crayon", "credentials", "curl", "cyclocomp", "data.table",
"DBI", "dbplyr", "debugme", "desc", "devtools", "diffobj", "digest",
"downlit", "dplyr", "dtplyr", "ellipsis", "evaluate", "extrafont",
"extrafontdb", "fansi", "farver", "fastmap", "fontawesome", "forcats",
"fs", "gargle", "generics", "gert", "ggplot2", "ggplot2movies",
"gh", "gitcreds", "globals", "glue", "golem", "googledrive",
"googlesheets4", "gtable", "haven", "here", "highr", "htmltools",
"htmlwidgets", "httpuv", "httr", "httr2", "ids", "ini", "isoband",
"janitor", "jquerylib", "jsonlite", "kableExtra", "knitr", "labeling",
"later", "lattice", "lazyeval", "leprechaun", "lifecycle", "lintr",
"logger", "lubridate", "magrittr", "markdown", "memoise",
"mime", "miniUI", "modelr", "munsell", "nlme", "openssl", "packer",
"palmerpenguins", "parsedate", "pillar", "pingr", "pkgbuild",
"pkgconfig", "pkgdown", "pkgload", "png", "praise", "prettyunits",
"processx", "profvis", "promises", "proto", "ps", "purrr", "R.cache",
"R.methodsS3", "R.oo", "R.utils", "R6", "ragg", "rappdirs", "rcmdcheck",
"RColorBrewer", "Rcpp", "readxl", "rematch", "rematch2", "remotes",
"reprex", "rex", "rhino", "rhub", "rlang", "rmarkdown", "roxygen2",
"rprojroot", "rstudioapi", "Rttf2pt1", "rversions", "rvest",
"sass", "scales", "selectr", "sessioninfo", "shiny", "shinytest",
"shinytest2", "showimage", "sloop", "sourcetools", "stringi",
"stringr", "styler", "survival", "svglite", "sys", "systemfonts",
"testthat", "textshaping", "tibble", "tidyr", "timechange", "tinytex",
"urlchecker", "usethis", "utf8", "uuid", "vctrs", "vdiffr", "viridisLite",
"waldo", "webdriver", "webshot", "websocket", "whisker", "whoami",
"withr", "xfun", "xml2", "xmlparsedata", "xopen", "xtable", "yaml",
"zip")
renv::install(pkgs)
renv::snapshot()
renv::install("skimr")
renv::snapshot()
devtools::load_all()
renv::install("zeallot")
renv::snapshot()
devtools::load_all()
devtools::document()
library(unitTestAppPkg)
devtools::load_all()
devtools::document()
library(unitTestAppPkg)
testthat::test_that("pull_numeric_cols() works", {
app_inputs_test <- readRDS(testthat::test_path("fixtures", "pull_cols_test.rds"))
# test numeric columns
testthat::expect_equal(
object = pull_numeric_cols(app_inputs_test),
expected =
c(
dbl_var_na = "dbl_var_na",
dbl_var = "dbl_var",
int_var_na = "int_var_na",
int_var = "int_var"
)
})
testthat::test_that("pull_facet_cols() works", {
app_inputs_test <- readRDS(testthat::test_path("fixtures", "pull_cols_test.rds"))
# remove binary columns
expect_equal(
object = dplyr::select(
app_inputs_test,
!dplyr::contains("bin")
) |> pull_facet_cols(),
expected =
c(
chr_facet5 = "chr_facet5",
chr_facet5_na = "chr_facet5_na",
fct_facet5 = "fct_facet5",
fct_facet5_na = "fct_facet5_na",
ord_facet5 = "ord_facet5",
ord_facet5_na = "ord_facet5_na"
)
})
testthat::test_that("pull_cat_cols() works", {
app_inputs_test <- readRDS(testthat::test_path("fixtures", "pull_cols_test.rds"))
testthat::expect_equal(
object = pull_cat_cols(app_inputs_test),
expected =
c(
chr6_var = "chr6_var",
chr7_var_na = "chr7_var_na",
fct6_var_na = "fct6_var_na",
fct7_var = "fct7_var",
ord6_var_na = "ord6_var_na",
ord7_var = "ord7_var"
)
})
testthat::test_that("pull_binary_cols() works", {
app_inputs_test <- readRDS(testthat::test_path("fixtures", "pull_cols_test.rds"))
expect_equal(
object = pull_binary_cols(app_inputs_test),
expected =
c(
log_bin_na = "log_bin_na",
log_bin = "log_bin",
int_bin_na = "int_bin_na",
int_bin = "int_bin",
chr_bin_na = "chr_bin_na",
chr_bin = "chr_bin"
)
})
devtools::load_all()
devtools::document()
library(unitTestAppPkg)
demoInputsApp()
demoInputsApp(data = NHANES::NHANES)
renv::install("NHANES")
demoInputsApp(data = NHANES::NHANES)
devtools::load_all()
devtools::document()
library(unitTestAppPkg)
