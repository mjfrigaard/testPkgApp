col_types_test <- readRDS(test_path("fixtures", "col_types_test.rds"))
# test logical class
col_type_log <- get_col_type_tbl(col_types_test, type = "log")
testthat::expect_equal(
object = class(col_type_log),
expected = c("tbl_df", "tbl", "data.frame")
)
# test logical names
testthat::expect_equal(
object = names(col_type_log),
expected = c("log_na", "log_var")
)
})
testthat::test_that("get_col_type_tbl() works", {
col_types_test <- readRDS(test_path("fixtures", "col_types_test.rds"))
# test logical class
col_types_class <- class(get_col_type_tbl(col_types_test, type = "log"))
testthat::expect_equal(
object = col_types_class,
expected = c("tbl_df", "tbl", "data.frame")
)
# test logical names
col_types_names <- names(get_col_type_tbl(col_types_test, type = "log"))
testthat::expect_equal(
object = col_types_names,
expected = c("log_na", "log_var")
)
})
testthat::test_that("get_col_type_tbl() works", {
col_types_test <- readRDS(test_path("fixtures", "col_types_test.rds"))
# test logical class
col_types_class <- class(get_col_type_tbl(col_types_test, type = "log"))
testthat::expect_equal(
object = col_types_class,
expected = c("tbl_df", "tbl", "data.frame")
)
# test logical names
col_types_names <- names(get_col_type_tbl(col_types_test, type = "log"))
testthat::expect_equal(
object = col_types_names,
expected = c("log_na", "log_var")
)
})
testthat::test_that("get_col_type_tbl() works", {
col_types_test <- readRDS(testthat::test_path("fixtures", "col_types_test.rds"))
# test logical class
col_types_class <- class(get_col_type_tbl(col_types_test, type = "log"))
testthat::expect_equal(
object = col_types_class,
expected = c("tbl_df", "tbl", "data.frame")
)
# test logical names
col_types_names <- names(get_col_type_tbl(col_types_test, type = "log"))
testthat::expect_equal(
object = col_types_names,
expected = c("log_na", "log_var")
)
})
devtools::load_all()
devtools::document()
library(testPkgApp)
renv::status()
renv::snapshot()
testthat::test_that("get_col_type_tbl() works", {
col_types_test <- readRDS(testthat::test_path("fixtures", "col_types_test.rds"))
# test logical class
col_types_class <- class(get_col_type_tbl(col_types_test, type = "log"))
testthat::expect_equal(
object = col_types_class,
expected = c("tbl_df", "tbl", "data.frame")
)
# test logical names
col_types_names <- names(get_col_type_tbl(col_types_test, type = "log"))
testthat::expect_equal(
object = col_types_names,
expected = c("log_na", "log_var")
)
# test integer class
col_types_class <- class(get_col_type_tbl(col_types_test, type = "int"))
testthat::expect_equal(
object = col_types_class,
expected = c("tbl_df", "tbl", "data.frame")
)
# test integer names
col_types_names <- names(get_col_type_tbl(col_types_test, type = "int"))
testthat::expect_equal(
object = col_types_names,
expected = c("int_na", "int_var")
)
# test double class
col_types_class <- class(get_col_type_tbl(col_types_test, type = "dbl"))
testthat::expect_equal(
object = col_types_class,
expected = c("tbl_df", "tbl", "data.frame")
)
# test double names
col_types_names <- names(get_col_type_tbl(col_types_test, type = "dbl"))
testthat::expect_equal(
object = col_types_names,
expected = c("dbl_na", "dbl_var")
)
# test character class
col_types_class <- class(get_col_type_tbl(col_types_test, type = "chr"))
testthat::expect_equal(
object = col_types_class,
expected = c("tbl_df", "tbl", "data.frame")
)
# test character names
col_types_names <- names(get_col_type_tbl(col_types_test, type = "chr"))
testthat::expect_equal(
object = col_types_names,
expected = c("chr_na", "chr_var")
)
# test factor class
col_types_class <- class(get_col_type_tbl(col_types_test, type = "fct"))
testthat::expect_equal(
object = col_types_class,
expected = c("tbl_df", "tbl", "data.frame")
)
# test factor names
col_types_names <- names(get_col_type_tbl(col_types_test, type = "fct"))
testthat::expect_equal(
object = col_types_names,
expected = c(
"fct_var", "fct_na",
"ord_fct", "ord_na")
)
})
testthat::test_file(path = "tests/testthat/test-get_col_type_tbl.R")
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
testthat::test_file(path = "tests/testthat/test-get_col_types.R")
fun <- function() {
cat("unit of work")
}
fun()
unit_of_work <- function() {
cat("verifiable purpose")
}
unit_of_work()
testthat::test_file(path = "tests/testthat/test-get_col_types.R")
devtools::load_all()
devtools::document()
library(testPkgApp)
testthat::test_file(path = "tests/testthat/test-get_col_types.R")
get_col_types(df = col_types_test,
type = "log",
return_tbl = FALSE)
col_types_test <- readRDS(testthat::test_path("fixtures", "col_types_test.rds"))
get_col_types(df = col_types_test,
type = "log",
return_tbl = FALSE)
testthat::test_file(path = "tests/testthat/test-get_col_types.R")
testthat::expect_equal(
object = get_col_types(df = col_types_test,
type = "int",
return_tbl = FALSE),
expected = purrr::set_names(
c("int_na", "int_var")
)
testthat::test_file(path = "tests/testthat/test-get_col_types.R")
paste0(LETTERS[1:5])
paste0("group ", as.integer([1:5])
paste0("group ", as.integer([1:5]))
paste0("group ", as.integer(1:5))
# fct_maker <- function(size, ord = FALSE, lvls, missing = FALSE) {
#   paste0("group ", as.integer(1:lvls))
# }
fct_maker <- function(size, lvls, missing = FALSE) {
if (isTRUE(missing)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)))
return(fct_vec)
} else {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- levs[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)))
return(fct_vec)
}
fct_maker(size 10, lvls = 5, missing = FALSE)
# fct_maker <- function(size, ord = FALSE, lvls, missing = FALSE) {
#   paste0("group ", as.integer(1:lvls))
# }
fct_maker <- function(size, lvls, missing = FALSE) {
if (isTRUE(missing)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)))
return(fct_vec)
} else {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- levs[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)))
return(fct_vec)
}
fct_maker(size 10, lvls = 5, missing = FALSE)
fct_maker(size = 10, lvls = 5, missing = FALSE)
# fct_maker <- function(size, ord = FALSE, lvls, missing = FALSE) {
#   paste0("group ", as.integer(1:lvls))
# }
fct_maker <- function(size, lvls, missing = FALSE) {
if (isTRUE(missing)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
} else {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- levs[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
}
if (isTRUE(ord)) {
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)),
ordered = TRUE)
} else {
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)))
}
return(fct_vec)
}
# fct_maker <- function(size, ord = FALSE, lvls, missing = FALSE) {
#   paste0("group ", as.integer(1:lvls))
# }
fct_maker <- function(size, lvls, ord = FALSE, missing = FALSE) {
if (isTRUE(missing)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
} else {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- levs[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
}
if (isTRUE(ord)) {
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)),
ordered = TRUE)
} else {
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)))
}
return(fct_vec)
}
fct_maker(size = 10, lvls = 5, missing = FALSE)
fct_maker(size = 10, lvls = 5, ord = TRUE, missing = FALSE)
paste("group ", LETTERS)
chr_maker <- function(size, missing = FALSE) {
if (isTRUE(missing)) {
x <- sample(paste("group ", LETTERS), size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
return(chr_vec)
} else {
chr_raw <- paste("group ", LETTERS)[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
return(chr_vec)
}
chr_maker(10)
chr_maker(10, TRUE)
col_types_test <- tibble::tibble(
log_na = log_maker(size = 10, missing = TRUE),
log_var = log_maker(size = 10),
int_na = int_maker(size = 10, missing = TRUE),
int_var = int_maker(size = 10),
dbl_na = dbl_maker(10, missing = TRUE),
dbl_var = dbl_maker(size = 10),
chr_na = chr_maker(10, missing = TRUE),
chr_var = chr_maker(10),
fct_var = fct_maker(size = 10, lvls = 5),
fct_na = fct_maker(size = 10, lvls = 5, missing = TRUE),
ord_fct = fct_maker(size = 10, lvls = 5, ord = TRUE),
ord_na = fct_maker(size = 10, lvls = 5,
ord = TRUE, missing = TRUE))
source("~/projects/apps/testPkgApp/tests/testthat/helpers.R", echo=TRUE)
col_types_test <- tibble::tibble(
log_na = log_maker(size = 10, missing = TRUE),
log_var = log_maker(size = 10),
int_na = int_maker(size = 10, missing = TRUE),
int_var = int_maker(size = 10),
dbl_na = dbl_maker(10, missing = TRUE),
dbl_var = dbl_maker(size = 10),
chr_na = chr_maker(10, missing = TRUE),
chr_var = chr_maker(10),
fct_var = fct_maker(size = 10, lvls = 5),
fct_na = fct_maker(size = 10, lvls = 5, missing = TRUE),
ord_fct = fct_maker(size = 10, lvls = 5, ord = TRUE),
ord_na = fct_maker(size = 10, lvls = 5,
ord = TRUE, missing = TRUE))
col_types_test
col_types_test <- tibble::tibble(
log_na = log_maker(size = 25, missing = TRUE),
log_var = log_maker(size = 25),
int_na = int_maker(size = 25, missing = TRUE),
int_var = int_maker(size = 25),
dbl_na = dbl_maker(25, missing = TRUE),
dbl_var = dbl_maker(size = 25),
chr_na = chr_maker(25, missing = TRUE),
chr_var = chr_maker(25),
fct_var = fct_maker(size = 25, lvls = 5),
fct_na = fct_maker(size = 25, lvls = 5, missing = TRUE),
ord_fct = fct_maker(size = 25, lvls = 5, ord = TRUE),
ord_na = fct_maker(size = 25, lvls = 5,
ord = TRUE, missing = TRUE))
col_types_test
fct_maker <- function(size, lvls, ord = FALSE, missing = FALSE) {
if (isTRUE(missing)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
} else {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- levs[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
}
if (isTRUE(ord)) {
fct_vec <- factor(chr_vec, levels = unique(sort(x)),
ordered = TRUE)
} else {
fct_vec <- factor(chr_vec, levels = unique(sort(x)))
}
return(fct_vec)
}
col_types_test <- tibble::tibble(
log_na = log_maker(size = 25, missing = TRUE),
log_var = log_maker(size = 25),
int_na = int_maker(size = 25, missing = TRUE),
int_var = int_maker(size = 25),
dbl_na = dbl_maker(25, missing = TRUE),
dbl_var = dbl_maker(size = 25),
chr_na = chr_maker(25, missing = TRUE),
chr_var = chr_maker(25),
fct_var = fct_maker(size = 25, lvls = 5),
fct_na = fct_maker(size = 25, lvls = 5, missing = TRUE),
ord_fct = fct_maker(size = 25, lvls = 5, ord = TRUE),
ord_na = fct_maker(size = 25, lvls = 5,
ord = TRUE, missing = TRUE))
fct_maker <- function(size, lvls, ord = FALSE, missing = FALSE) {
if (isTRUE(missing) & isTRUE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(x)),
ordered = TRUE)
} else if (isFALSE(missing) & isTRUE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- levs[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)),
ordered = TRUE)
} else if (isTRUE(missing) & isFALSE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(x)))
} else {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- levs[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)))
}
return(fct_vec)
}
fct_maker(size = 10, lvls = 5, ord = TRUE, missing = FALSE)
fct_maker <- function(size, lvls, ord = FALSE, missing = FALSE) {
if (isTRUE(missing) & isTRUE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(x)),
ordered = TRUE)
} else if (isFALSE(missing) & isTRUE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- levs[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)),
ordered = TRUE)
} else if (isTRUE(missing) & isFALSE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(x)))
} else {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- levs[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)))
}
return(fct_vec)
}
fct_maker(size = 10, lvls = 5, ord = TRUE, missing = FALSE)
fct_maker(size = 10, lvls = 5, ord = TRUE, missing = TRUE)
fct_maker(size = 10, lvls = 5, ord = TRUE, missing = FALSE)
fct_maker <- function(size, lvls, ord = FALSE, missing = FALSE) {
if (isTRUE(missing) & isTRUE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(x)),
ordered = TRUE)
} else if (isFALSE(missing) & isTRUE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- levs[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
ord_levels <-  sort(unique(chr_vec))
fct_vec <- factor(chr_vec, levels = ord_levels, ordered = TRUE)
} else if (isTRUE(missing) & isFALSE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(x)))
} else {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- levs[1:as.integer(size)]
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)))
}
return(fct_vec)
}
fct_maker(size = 10, lvls = 5, ord = TRUE, missing = FALSE)
fct_maker(size = 10, lvls = 5, ord = TRUE, missing = TRUE)
fct_maker(size = 10, lvls = 5, ord = TRUE, missing = FALSE)
levs <- paste0("group ", as.integer(1:5))
levs
levs[1:as.integer(10)]
rep(levs, times = 10)
fct_maker <- function(size, lvls, ord = FALSE, missing = FALSE) {
if (isTRUE(missing) & isTRUE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(x)),
ordered = TRUE)
} else if (isFALSE(missing) & isTRUE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- rep(levs, times = size)
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
ord_levels <-  sort(unique(chr_vec))
fct_vec <- factor(chr_vec, levels = ord_levels, ordered = TRUE)
} else if (isTRUE(missing) & isFALSE(ord)) {
levs <- paste0("group ", as.integer(1:lvls))
x <- sample(levs, size = size, replace = TRUE)
nas <- rep(NA_character_, times = as.integer(size) - 1)
chr_raw <- as.vector(c(x, nas), mode = "character")
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(x)))
} else {
levs <- paste0("group ", as.integer(1:lvls))
chr_raw <- rep(levs, times = size)
chr_vec <- sample(x = chr_raw, size = size, replace = TRUE)
fct_vec <- factor(chr_vec, levels = unique(sort(chr_vec)))
}
return(fct_vec)
}
fct_maker(size = 10, lvls = 5, ord = TRUE, missing = TRUE)
fct_maker(size = 10, lvls = 5, ord = TRUE, missing = FALSE)
fct_maker(size = 10, lvls = 5, ord = FALSE, missing = TRUE)
fct_maker(size = 10, lvls = 5, ord = FALSE, missing = FALSE)
col_types_test <- tibble::tibble(
log_na = log_maker(size = 10, missing = TRUE),
log_var = log_maker(size = 10),
int_na = int_maker(size = 10, missing = TRUE),
int_var = int_maker(size = 10),
dbl_na = dbl_maker(10, missing = TRUE),
dbl_var = dbl_maker(size = 10),
chr_na = chr_maker(10, missing = TRUE),
chr_var = chr_maker(10),
fct_var = fct_maker(size = 10, lvls = 5),
fct_na = fct_maker(size = 10, lvls = 5, missing = TRUE),
ord_fct = fct_maker(size = 10, lvls = 5, ord = TRUE),
ord_na = fct_maker(size = 10, lvls = 5,
ord = TRUE, missing = TRUE))
col_types_test
col_types_test <- tibble::tibble(
log_na = log_maker(size = 10, missing = TRUE),
log_var = log_maker(size = 10),
int_na = int_maker(size = 10, missing = TRUE),
int_var = int_maker(size = 10),
dbl_na = dbl_maker(10, missing = TRUE),
dbl_var = dbl_maker(size = 10),
chr_na = chr_maker(10, missing = TRUE),
chr_var = chr_maker(10),
fct_na = fct_maker(size = 10, lvls = 5, missing = TRUE),
fct_var = fct_maker(size = 10, lvls = 5),
ord_na = fct_maker(size = 10, lvls = 5,
ord = TRUE, missing = TRUE),
ord_fct = fct_maker(size = 10, lvls = 5, ord = TRUE))
col_types_test
