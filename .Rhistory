)
}
# bin_maker(type = "log", size = 2)
# bin_maker(type = "log", size = 2, missing = TRUE)
# bin_maker(type = "int", size = 10)
# bin_maker(type = "int", size = 10, missing = TRUE)
# bin_maker(type = "chr", size = 10)
# bin_maker(type = "chr", size = 10, missing = TRUE)
# bin_maker(type = "fct", size = 10)
# bin_maker(type = "fct", size = 10, missing = TRUE)
# bin_maker(type = "ord", size = 10)
# bin_maker(type = "ord", size = 10, missing = TRUE)
facet_maker <- function(type, size, lvls, missing = FALSE) {
if (isTRUE(missing)) {
switch(type,
chr = chr_maker(size = size, lvls = lvls, missing = TRUE),
fct = fct_maker(size = size, lvls = lvls, missing = TRUE),
ord = fct_maker(size = size, lvls = lvls, ord = TRUE, missing = TRUE)
)
} else {
switch(type,
chr = chr_maker(size = size, lvls = lvls, missing = FALSE),
fct = fct_maker(size = size, lvls = lvls, missing = FALSE),
ord = fct_maker(size = size, lvls = lvls, ord = TRUE, missing = FALSE)
)
}
# facet_maker(type = "chr", size = 10, lvls = 4, missing = TRUE)
# facet_maker(type = "fct", size = 10, lvls = 4, missing = TRUE)
# facet_maker(type = "ord", size = 6, lvls = 5, missing = FALSE)
app_inputs_test <- tibble::tibble(
# logical binary
log_bin_na = bin_maker(type = "log",
size = 10, missing = TRUE),
log_bin = bin_maker(type = "log",
size = 10, missing = FALSE),
# integer binary
int_bin_na = bin_maker(type = "int",
size = 10, missing = TRUE),
int_bin = bin_maker(type = "int",
size = 10, missing = FALSE),
# character binary
chr_bin_na = bin_maker(type = "chr",
size = 10, missing = TRUE),
chr_bin = bin_maker(type = "chr",
size = 10, missing = FALSE),
chr_bin2_na = chr_maker(size = 10, lvls = 1, missing = TRUE),
# double
dbl_na = dbl_maker(10, missing = TRUE),
dbl_var = dbl_maker(size = 10),
# character
chr6_var = chr_maker(size = 10, lvls = 6, missing = TRUE),
chr7_var_na = chr_maker(size = 10, lvls = 7),
# factor
fct6_var_na = fct_maker(size = 10, lvls = 6, missing = TRUE),
fct7_var = fct_maker(size = 10, lvls = 7),
# ordered
ord6_var_na = fct_maker(size = 10, lvls = 6,
ord = TRUE, missing = TRUE),
ord7_var = fct_maker(size = 10, lvls = 7, ord = TRUE),
# character facets
chr_facet5 = facet_maker(type = "chr", size = 10,
lvls = 5, missing = FALSE),
chr_facet5_na = facet_maker(type = "chr", size = 10,
lvls = 5, missing = TRUE),
# factor facets
fct_facet5 = facet_maker(type = "fct", size = 10,
lvls = 5, missing = FALSE),
fct_facet5_na = facet_maker(type = "fct", size = 10,
lvls = 5, missing = TRUE),
# ordered facets
ord_facet5 = facet_maker(type = "ord", size = 10,
lvls = 5, missing = FALSE),
ord_facet5_na = facet_maker(type = "ord", size = 10,
lvls = 5, missing = TRUE))
dplyr::glimpse(app_inputs_test)
# export to tests/testthat/fixtures/
saveRDS(app_inputs_test,
file = "tests/testthat/fixtures/app_inputs_test.rds")
devtools::load_all()
devtools::document()
library(testPkgApp)
cat_app_inputs(palmerpenguins::penguins)
devtools::load_all()
devtools::document()
library(testPkgApp)
cat_app_inputs(dplyr::starwars)
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
# test categorical columns
df <- app_inputs_test
bin_chrs <- get_col_types(df = df,
type = 'chr',
return_tbl = TRUE) |>
make_binary_vec(type = "chr")
bin_chrs
bin_fcts <- get_col_types(df = df,
type = 'fct',
return_tbl = TRUE) |>
make_binary_vec(type = "fct")
bin_fcts
app_inputs_test
facet_chrs <- get_col_types(df = df,
type = 'chr',
return_tbl = TRUE) |>
make_facet_vec(type = "chr")
facet_chrs
facet_fcts <- get_col_types(df = df,
type = 'fct',
return_tbl = TRUE) |>
make_facet_vec(type = "fct")
facet_fcts
bins_facets <- purrr::set_names(c(bin_chrs, bin_fcts,
facet_chrs, facet_fcts))
bins_facets
# tibble of characters
chrs_tbl <- get_col_types(df = df, type = 'chr', return_tbl = TRUE)
all_chrs_nms <- names(chrs_tbl)
# tibble of factors
fcts_tbl <- get_col_types(df = df, type = 'fct', return_tbl = TRUE)
all_fcts_nms <- names(fcts_tbl)
# assemble
all_chrs_fcts <- purrr::set_names(c(all_chrs_nms, all_fcts_nms))
# set diff
cats_nms <- setdiff(x = bins_facets, y = all_chrs_fcts)
# set names
cats <- purrr::set_names(cats_nms)
cats
all_fcts_nms
all_chrs_nms
all_fcts_nms
all_chrs_fcts
cats_nms
binary_app_inputs(app_inputs_test)
bins <- binary_app_inputs(app_inputs_test)
facet_app_inputs(app_inputs_test)
all_facets <- facet_app_inputs(app_inputs_test)
all_facets %nin% bins
all_facets[all_facets %nin% bins]
check_binary_vec(x = app_inputs_test$chr_bin2_na, "chr")
levels(x = app_inputs_test$chr_bin2_na)
unique(x = app_inputs_test$chr_bin2_na)
devtools::load_all()
devtools::document()
library(testPkgApp)
require(NHANES)
facet_app_inputs(df = NHANES::NHANES)
str(dplyr::select(NHANES::NHANES, dplyr::all_of(facet_app_inputs(df = NHANES::NHANES))))
dplyr::select(app_inputs_test,
!dplyr::contains("bin")) |> facet_app_inputs()
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
dplyr::select(app_inputs_test,
!dplyr::contains("bin")) |> facet_app_inputs()
dplyr::select(app_inputs_test,
!dplyr::contains("bin")) |> facet_app_inputs() |> dput()
testthat::test_that("facet_app_inputs() works", {
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
# remove binary columns
expect_equal(object = dplyr::select(app_inputs_test,
!dplyr::contains("bin")) |> facet_app_inputs(),
expected =
c(chr_facet5 = "chr_facet5",
chr_facet5_na = "chr_facet5_na",
fct_facet5 = "fct_facet5",
fct_facet5_na = "fct_facet5_na",
ord_facet5 = "ord_facet5",
ord_facet5_na = "ord_facet5_na")
)
})
cat_app_inputs(app_inputs_test)
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
cat_app_inputs <- function(df) {
bins <- binary_app_inputs(df = df)
facets <- binary_app_inputs(df = df)
# remove these
bins_facets <- c(bins, facets)
return(bins_facets)
# # tibble of characters
# chrs_tbl <- get_col_types(df = df, type = 'chr', return_tbl = FALSE)
# all_chrs_nms <- names(chrs_tbl)
# # tibble of factors
# fcts_tbl <- get_col_types(df = df, type = 'fct', return_tbl = FALSE)
# all_fcts_nms <- names(fcts_tbl)
# # assemble
# all_chrs_fcts <- purrr::set_names(c(all_chrs_nms, all_fcts_nms))
# # set diff
# cats_nms <- setdiff(x = bins_facets, y = all_chrs_fcts)
# # set names
# cats <- purrr::set_names(cats_nms)
# return(cats)
}
cat_app_inputs(app_inputs_test)
cat_app_inputs <- function(df) {
bins <- binary_app_inputs(df = df)
facets <- binary_app_inputs(df = df)
# remove these
bins_facets <- c(bins, facets)
return(bins_facets)
# # tibble of characters
# chrs_tbl <- get_col_types(df = df, type = 'chr', return_tbl = FALSE)
# all_chrs_nms <- names(chrs_tbl)
# # tibble of factors
# fcts_tbl <- get_col_types(df = df, type = 'fct', return_tbl = FALSE)
# all_fcts_nms <- names(fcts_tbl)
# # assemble
# all_chrs_fcts <- purrr::set_names(c(all_chrs_nms, all_fcts_nms))
# # set diff
# cats_nms <- setdiff(x = bins_facets, y = all_chrs_fcts)
# # set names
# cats <- purrr::set_names(cats_nms)
# return(cats)
}
cat_app_inputs(app_inputs_test)
cat_app_inputs <- function(df) {
bins <- binary_app_inputs(df = df)
facets <- facet_app_inputs(df = df)
# remove these
bins_facets <- c(bins, facets)
return(bins_facets)
# # tibble of characters
# chrs_tbl <- get_col_types(df = df, type = 'chr', return_tbl = FALSE)
# all_chrs_nms <- names(chrs_tbl)
# # tibble of factors
# fcts_tbl <- get_col_types(df = df, type = 'fct', return_tbl = FALSE)
# all_fcts_nms <- names(fcts_tbl)
# # assemble
# all_chrs_fcts <- purrr::set_names(c(all_chrs_nms, all_fcts_nms))
# # set diff
# cats_nms <- setdiff(x = bins_facets, y = all_chrs_fcts)
# # set names
# cats <- purrr::set_names(cats_nms)
# return(cats)
}
cat_app_inputs(app_inputs_test)
cat_app_inputs <- function(df) {
bins <- binary_app_inputs(df = df)
facets <- facet_app_inputs(df = df)
# remove these
bins_facets <- c(bins, facets)
# return(bins_facets)
# tibble of characters
chrs <- get_col_types(df = df, type = 'chr', return_tbl = FALSE)
# tibble of factors
fcts <- get_col_types(df = df, type = 'fct', return_tbl = FALSE)
# assemble
chrs_fcts <- purrr::set_names(c(chrs, fcts))
return(chrs_fcts)
# set diff
# cats_nms <- setdiff(x = bins_facets, y = all_chrs_fcts)
# # set names
# cats <- purrr::set_names(cats_nms)
# return(cats)
}
cat_app_inputs(app_inputs_test)
cat_app_inputs <- function(df) {
bins <- binary_app_inputs(df = df)
facets <- facet_app_inputs(df = df)
# assemble
all_bins_facets_list <- list(bins, facets)
# reduce
bins_facets_list <- purrr::compact(all_bins_facets_list)
# vector
bins_facets <- purrr::list_c(bins_facets_list)
return(bins_facets)
# remove these
# bins_facets <- c(bins, facets)
# # characters
# chrs <- get_col_types(df = df, type = 'chr', return_tbl = FALSE)
# # factors
# fcts <- get_col_types(df = df, type = 'fct', return_tbl = FALSE)
# # assemble
# chrs_fcts <- purrr::set_names(c(chrs, fcts))
# # assemble
# all_facets_list <- list(chr_facets, fct_facets)
# # reduce
# facets_list <- purrr::compact(all_facets_list)
# # vector
# all_facets <- purrr::list_c(facets_list)
# # reduce
# facets <- all_facets[all_facets %nin% bins]
# return(chrs_fcts)
# set diff
# cats_nms <- setdiff(x = bins_facets, y = all_chrs_fcts)
# # set names
# cats <- purrr::set_names(cats_nms)
# return(cats)
}
cat_app_inputs(app_inputs_test)
cat_app_inputs <- function(df) {
bins <- binary_app_inputs(df = df)
facets <- facet_app_inputs(df = df)
# assemble
all_bins_facets_list <- list(bins, facets)
# reduce
bins_facets_list <- purrr::compact(all_bins_facets_list)
# vector
bins_facets <- purrr::list_c(bins_facets_list)
# return(bins_facets)
# remove these
# characters
chrs <- get_col_types(df = df, type = 'chr', return_tbl = FALSE)
# factors
fcts <- get_col_types(df = df, type = 'fct', return_tbl = FALSE)
# assemble
all_chrs_fcts_list <- list(chrs, fcts)
# reduce
chrs_fcts_list <- purrr::compact(all_chrs_fcts_list)
# vector
chrs_fcts <- purrr::list_c(chrs_fcts_list)
# reduce
cats_nms <- chrs_fcts[chrs_fcts %nin% bins_facets]
# name
cats <- purrr::set_names(cats_nms)
return(cats)
}
cat_app_inputs(app_inputs_test)
devtools::load_all()
devtools::document()
library(testPkgApp)
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
cat_app_inputs(app_inputs_test)
cat_app_inputs(app_inputs_test) |> dput()
testthat::test_that("cat_app_inputs() works", {
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
testthat::expect_equal(object = cat_app_inputs(app_inputs_test),
expected =
c(chr6_var = "chr6_var",
chr7_var_na = "chr7_var_na",
fct6_var_na = "fct6_var_na",
fct7_var = "fct7_var",
ord6_var_na = "ord6_var_na",
ord7_var = "ord7_var")
)
})
testthat::test_that("num_app_inputs() works", {
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
# test numeric columns
testthat::expect_equal(object = num_app_inputs(app_inputs_test),
expected =
c(dbl_na = "dbl_na", dbl_var = "dbl_var")
)
})
app_inputs_test <- tibble::tibble(
# logical binary
log_bin_na = bin_maker(type = "log",
size = 10, missing = TRUE),
log_bin = bin_maker(type = "log",
size = 10, missing = FALSE),
# integer binary
int_bin_na = bin_maker(type = "int",
size = 10, missing = TRUE),
int_bin = bin_maker(type = "int",
size = 10, missing = FALSE),
# character binary
chr_bin_na = bin_maker(type = "chr",
size = 10, missing = TRUE),
chr_bin = bin_maker(type = "chr",
size = 10, missing = FALSE),
chr_bin2_na = chr_maker(size = 10,
lvls = 1, missing = TRUE),
# double
dbl_var_na = dbl_maker(10, missing = TRUE),
dbl_var = dbl_maker(size = 10),
# integer
int_var_na = int_maker(10, missing = TRUE),
int_var = int_maker(size = 10),
# character
chr6_var = chr_maker(size = 10,
lvls = 6, missing = TRUE),
chr7_var_na = chr_maker(size = 10, lvls = 7),
# factor
fct6_var_na = fct_maker(size = 10,
lvls = 6, missing = TRUE),
fct7_var = fct_maker(size = 10, lvls = 7),
# ordered
ord6_var_na = fct_maker(size = 10, lvls = 6,
ord = TRUE, missing = TRUE),
ord7_var = fct_maker(size = 10,
lvls = 7, ord = TRUE),
# character facets
chr_facet5 = facet_maker(type = "chr", size = 10,
lvls = 5, missing = FALSE),
chr_facet5_na = facet_maker(type = "chr", size = 10,
lvls = 5, missing = TRUE),
# factor facets
fct_facet5 = facet_maker(type = "fct", size = 10,
lvls = 5, missing = FALSE),
fct_facet5_na = facet_maker(type = "fct", size = 10,
lvls = 5, missing = TRUE),
# ordered facets
ord_facet5 = facet_maker(type = "ord", size = 10,
lvls = 5, missing = FALSE),
ord_facet5_na = facet_maker(type = "ord", size = 10,
lvls = 5, missing = TRUE))
source("~/projects/apps/testPkgApp/tests/testthat/helpers.R", echo=TRUE)
app_inputs_test <- tibble::tibble(
# logical binary
log_bin_na = bin_maker(type = "log",
size = 10, missing = TRUE),
log_bin = bin_maker(type = "log",
size = 10, missing = FALSE),
# integer binary
int_bin_na = bin_maker(type = "int",
size = 10, missing = TRUE),
int_bin = bin_maker(type = "int",
size = 10, missing = FALSE),
# character binary
chr_bin_na = bin_maker(type = "chr",
size = 10, missing = TRUE),
chr_bin = bin_maker(type = "chr",
size = 10, missing = FALSE),
chr_bin2_na = chr_maker(size = 10,
lvls = 1, missing = TRUE),
# double
dbl_var_na = dbl_maker(10, missing = TRUE),
dbl_var = dbl_maker(size = 10),
# integer
int_var_na = int_maker(10, missing = TRUE),
int_var = int_maker(size = 10),
# character
chr6_var = chr_maker(size = 10,
lvls = 6, missing = TRUE),
chr7_var_na = chr_maker(size = 10, lvls = 7),
# factor
fct6_var_na = fct_maker(size = 10,
lvls = 6, missing = TRUE),
fct7_var = fct_maker(size = 10, lvls = 7),
# ordered
ord6_var_na = fct_maker(size = 10, lvls = 6,
ord = TRUE, missing = TRUE),
ord7_var = fct_maker(size = 10,
lvls = 7, ord = TRUE),
# character facets
chr_facet5 = facet_maker(type = "chr", size = 10,
lvls = 5, missing = FALSE),
chr_facet5_na = facet_maker(type = "chr", size = 10,
lvls = 5, missing = TRUE),
# factor facets
fct_facet5 = facet_maker(type = "fct", size = 10,
lvls = 5, missing = FALSE),
fct_facet5_na = facet_maker(type = "fct", size = 10,
lvls = 5, missing = TRUE),
# ordered facets
ord_facet5 = facet_maker(type = "ord", size = 10,
lvls = 5, missing = FALSE),
ord_facet5_na = facet_maker(type = "ord", size = 10,
lvls = 5, missing = TRUE))
# export to tests/testthat/fixtures/
saveRDS(app_inputs_test,
file = "tests/testthat/fixtures/app_inputs_test.rds")
devtools::load_all()
devtools::document()
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
library(testPkgApp)
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
num_app_inputs(app_inputs_test) |> dput()
num_app_inputs <- function(df) {
bins <- binary_app_inputs(df = df)
facets <- facet_app_inputs(df = df)
# assemble
all_bins_facets_list <- list(bins, facets)
# reduce
bins_facets_list <- purrr::compact(all_bins_facets_list)
# vector
bins_facets <- purrr::list_c(bins_facets_list)
# vector of doubles
dbls <- get_col_types(df = df, type = 'dbl', return_tbl = FALSE)
ints <- get_col_types(df = df, type = 'int', return_tbl = FALSE)
# assemble
all_dbls_ints_list <- list(dbls, ints)
# reduce
dbls_ints_list <- purrr::compact(all_dbls_ints_list)
# vector
dbls_ints <- purrr::list_c(dbls_ints_list)
# reduce
nums_nms <- dbls_ints[dbls_ints %nin% bins_facets]
# name
nums <- purrr::set_names(nums_nms)
return(nums)
}
num_app_inputs(app_inputs_test)
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
devtools::document()
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
library(testPkgApp)
# vector of doubles
num_app_inputs(app_inputs_test)
num_app_inputs(app_inputs_test) |> dput()
testthat::test_that("num_app_inputs() works", {
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
# test numeric columns
testthat::expect_equal(object = num_app_inputs(app_inputs_test),
expected =
c(dbl_var_na = "dbl_var_na",
dbl_var = "dbl_var",
int_var_na = "int_var_na",
int_var = "int_var")
)
})
testthat::test_that("cat_app_inputs() works", {
app_inputs_test <- readRDS(testthat::test_path("fixtures", "app_inputs_test.rds"))
testthat::expect_equal(object = cat_app_inputs(app_inputs_test),
expected =
c(chr6_var = "chr6_var",
chr7_var_na = "chr7_var_na",
fct6_var_na = "fct6_var_na",
fct7_var = "fct7_var",
ord6_var_na = "ord6_var_na",
ord7_var = "ord7_var")
)
})
