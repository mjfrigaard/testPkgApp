usethis::use_test("make_binary_cols_vec")
usethis::use_test("make_facet_cols_vec")
make_binary_checks_df(df = testdf_app_inputs, type = "log")
dput(make_binary_checks_df(df = testdf_app_inputs, type = "log"))
dput(make_binary_checks_df(df = testdf_app_inputs, type = "int"))
dput(make_binary_checks_df(df = testdf_app_inputs, type = "chr"))
get_col_type_df(df = testdf_app_inputs, type = "int")
int_cols <- get_col_type_df(df = testdf_app_inputs, type = "int")
dput(make_binary_checks_df(df = int_cols, type = "int"))
log_cols <- get_col_type_df(df = testdf_app_inputs, type = "log")
log_cols
dput(make_binary_checks_df(df = log_cols, type = "log"))
int_cols <- get_col_type_df(df = testdf_app_inputs, type = "int")
int_cols
dput(make_binary_checks_df(df = chr_cols, type = "chr"))
chr_cols <- get_col_type_df(df = testdf_app_inputs, type = "chr")
dput(make_binary_checks_df(df = chr_cols, type = "chr"))
chr_cols
## code to prepare `testdf_app_inputs` dataset goes here
require(tibble)
require(readr)
# test data ----------------------------
testdf_app_inputs <- tibble::tibble(
# logical binary (with missing)
log_na_bin = sample(x = c(TRUE, FALSE, NA, TRUE), 10, TRUE),
# logical binary (no missing)
log_bin = sample(x = c(TRUE, FALSE, FALSE, TRUE), 10, TRUE),
# integer binary (with missing)
int_bin = sample(x = c(0L, 1L, NA_integer_, 1L), 10, TRUE),
# character binary variable (2 unique values, missing)
chr_3l_na_bin = sample(x = c("A", "B", NA_character_, "B"),
10, TRUE),
# two level ordinal binary factor (with missing)
ord_bin = factor(x = sample(x = c("high", "low",
NA_character_, "high"),
10, TRUE),
levels = c("low", "high"),
ordered = TRUE),
# two level binary factor (with missing)
fct_bin = factor(sample(x = c("hot", "cold",
NA_character_, "cold"),
10, TRUE),
levels = c("hot", "cold")),
# character facet variable (4 unique values)
chr_4l_facet = sample(x = c("A", "B", "C", "D"), 10, TRUE),
# three level integer variable (with missing)
int_3l_na = sample(x = c(0L, 1L, NA_integer_, 2L), 10, TRUE),
# three level double variable (with missing)
dbl_3l_na = sample(x = c(0.5, 1.2, NA_real_, 0.001), 10, TRUE),
# three level ordinal factor (with missing)
ord_3l_na = factor(sample(x = c("high", "low",
NA_character_, "med"), 10, TRUE),
levels = c("low", "high","med"),
ordered = TRUE),
# three level ordinal factor (no missing)
ord_3l = factor(sample(x = c("high", "low", "med"), 10, TRUE),
levels = c("low", "high","med"),
ordered = TRUE),
# three level factor (with missing)
fct_3l_facet = factor(sample(x = c("left", "right", "center"),
10, TRUE),
levels = c("left", "right", "center")),
# three level factor (no missing)
fct_3l_na_facet = factor(sample(x = c("left", "right",
NA_character_, "center"),
10, TRUE),
levels = c("left", "right", "center")),
# five level factor, sixth value not included in levels
fct_5lv6rep_na_facet = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5")),
# four level factor, three levels represented
fct_4lv3rep_na_facet = factor(sample(x = c("group 1", "group 2",
"group 3", NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4")),
# six level factor
fct_6l_na = factor(sample(x = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6",
NA_character_),
10, TRUE),
levels = c("group 1", "group 2",
"group 3", "group 4",
"group 5", "group 6")),
# ten level character variable (no missing)
chr_10l = c(LETTERS[1:10]),
# ten level character variable (with missing)
chr_10l_na = sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
# ten level factor variable (no missing)
fct_10l = factor(x = sample(c(LETTERS[1:10]), 10, TRUE),
levels = c(LETTERS[1:10])),
# ten level factor variable (with missing)
fct_10l_na = factor(sample(c(LETTERS[1:10], NA_character_), 10, TRUE),
levels = c(LETTERS[1:10])))
usethis::use_data(testdf_app_inputs, overwrite = TRUE)
# export to tests/testthat/fixtures/
saveRDS(testdf_app_inputs,
file = "tests/testthat/fixtures/testdf_app_inputs.rds")
devtools::load_all()
devtools::document()
library(testPkgApp)
dput(names(get_col_type_df(testdf_app_inputs, type = "chr")))
dput(get_col_type_df(df = testdf_app_inputs, type = "chr"))
dput(make_binary_checks_df(df = chr_cols, type = "chr"))
chr_cols <- get_col_type_df(df = testdf_app_inputs, type = "chr")
dput(make_binary_checks_df(df = chr_cols, type = "chr"))
fct_cols <- get_col_type_df(df = testdf_app_inputs, type = "fct")
fct_cols
dput( make_binary_checks_df(df = fct_cols, type = "fct"))
testthat::test_file(path = "tests/testthat/test-make_binary_checks_df.R")
# run utility function tests ----------------------------------------------
# testthat::test_file(path = "tests/testthat/test-binary_vars.R")
testthat::test_file(path = "tests/testthat/test-binary_app_inputs.R")
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
testthat::test_file(path = "tests/testthat/test-get_binary_checks_vec.R")
testthat::test_file(path = "tests/testthat/test-get_facet_checks_vec.R")
testthat::test_file(path = "tests/testthat/test-make_facet_checks_df.R")
testthat::test_file(path = "tests/testthat/test-make_binary_checks_df.R")
testthat::test_file(path = "tests/testthat/test-get_col_type_df.R")
testthat::test_file(path = "tests/testthat/test-get_binary_checks_vec.R")
testthat::test_file(path = "tests/testthat/test-get_facet_checks_vec.R")
testthat::test_file(path = "tests/testthat/test-make_binary_checks_df.R")
renv::status()
install.packages("yaml")
renv::update()
renv::restore()
structure(list(x = "x"),
class = c("tbl_df", "tbl", "data.frame"),
row.names = integer(0),
names = character(0))
renv::status()
structure(list(),
class = c("tbl_df", "tbl", "data.frame"),
row.names = integer(0),
names = character(0))
structure(list(x = "x"),
class = c("tbl_df", "tbl", "data.frame"),
row.names = integer(0),
names = character(0))
data.frame(x = "")
dput(data.frame(x = ""))
tibble::tibble(x = "")
dput(tibble::tibble(x = ""))
#'   * `"list"`: list
#'
#' @return columns of `type` (empty `tibble` is no columns of specified type
#' exist)
#' @export get_col_type_df
#'
#' @examples
#' require(dplyr)
#' get_col_type_df(dplyr::starwars, type = "chr")
#' get_col_type_df(dplyr::starwars, type = "list")
get_col_type <- function(x, type, df = TRUE) {
if (type %nin% c("log", "int", "dbl", "chr", "fct", "list")) {
cli::cli_abort("No columns of that type...")
}
if (isFALSE(df)) {
df_nms <- switch(type,
log = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.logical))),
int = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.integer))),
dbl = named(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.double))),
chr = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.character))),
fct = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.factor))),
list = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.list))))
return(df_nms)
} else {
df_cols <- switch(type,
log = dplyr::select(tibble::as_tibble(df), dplyr::where(is.logical)),
int = dplyr::select(tibble::as_tibble(df), dplyr::where(is.integer)),
dbl = dplyr::select(tibble::as_tibble(df), dplyr::where(is.double)),
chr = dplyr::select(tibble::as_tibble(df), dplyr::where(is.character)),
fct = dplyr::select(tibble::as_tibble(df), dplyr::where(is.factor)),
list = dplyr::select(tibble::as_tibble(df), dplyr::where(is.list))
)
return(df_cols)
}
get_col_type_df(dplyr::starwars, type = "chr")
get_col_type(dplyr::starwars, type = "chr")
devtools::load_all()
install.packages("devtools")
devtools::load_all()
library(testPkgApp)
get_col_type <- function(x, type, df = TRUE) {
if (type %nin% c("log", "int", "dbl", "chr", "fct", "list")) {
cli::cli_abort("No columns of that type...")
}
if (isFALSE(df)) {
df_nms <- switch(type,
log = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.logical))),
int = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.integer))),
dbl = named(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.double))),
chr = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.character))),
fct = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.factor))),
list = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.list))))
return(df_nms)
} else {
df_cols <- switch(type,
log = dplyr::select(tibble::as_tibble(df), dplyr::where(is.logical)),
int = dplyr::select(tibble::as_tibble(df), dplyr::where(is.integer)),
dbl = dplyr::select(tibble::as_tibble(df), dplyr::where(is.double)),
chr = dplyr::select(tibble::as_tibble(df), dplyr::where(is.character)),
fct = dplyr::select(tibble::as_tibble(df), dplyr::where(is.factor)),
list = dplyr::select(tibble::as_tibble(df), dplyr::where(is.list))
)
return(df_cols)
}
get_col_type(dplyr::starwars, type = "chr")
get_col_type(dplyr::starwars, type = "fct")
get_col_type(dplyr::starwars, type = "list")
get_col_type(dplyr::starwars, type = "list", FALSE)
get_col_type(dplyr::storms, type = "list", FALSE)
get_col_type(dplyr::storms, type = "dbl", FALSE)
get_col_type <- function(x, type, df = TRUE) {
if (type %nin% c("log", "int", "dbl", "chr", "fct", "list")) {
cli::cli_abort("No columns of that type...")
}
if (isFALSE(df)) {
df_nms <- switch(type,
log = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.logical))),
int = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.integer))),
dbl = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.double))),
chr = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.character))),
fct = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.factor))),
list = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.list))))
return(df_nms)
} else {
df_cols <- switch(type,
log = dplyr::select(tibble::as_tibble(df), dplyr::where(is.logical)),
int = dplyr::select(tibble::as_tibble(df), dplyr::where(is.integer)),
dbl = dplyr::select(tibble::as_tibble(df), dplyr::where(is.double)),
chr = dplyr::select(tibble::as_tibble(df), dplyr::where(is.character)),
fct = dplyr::select(tibble::as_tibble(df), dplyr::where(is.factor)),
list = dplyr::select(tibble::as_tibble(df), dplyr::where(is.list))
)
return(df_cols)
}
get_col_type(dplyr::storms, type = "dbl", FALSE)
get_col_type <- function(x, type, df = TRUE) {
if (type %nin% c("log", "int", "dbl", "chr", "fct", "list")) {
cli::cli_abort("No columns of that type...")
}
if (isFALSE(df)) {
df_cols <- switch(type,
log = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.logical))),
int = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.integer))),
dbl = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.double))),
chr = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.character))),
fct = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.factor))),
list = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.list))))
} else {
df_cols <- switch(type,
log = dplyr::select(tibble::as_tibble(df), dplyr::where(is.logical)),
int = dplyr::select(tibble::as_tibble(df), dplyr::where(is.integer)),
dbl = dplyr::select(tibble::as_tibble(df), dplyr::where(is.double)),
chr = dplyr::select(tibble::as_tibble(df), dplyr::where(is.character)),
fct = dplyr::select(tibble::as_tibble(df), dplyr::where(is.factor)),
list = dplyr::select(tibble::as_tibble(df), dplyr::where(is.list)))
}
return(df_cols)
}
get_col_type(dplyr::storms, type = "dbl", FALSE)
dplyr::storms
install.packages("NHANES")
library(NHANES)
NHANES::NHANES
NHANES::NHANESraw
ggplot2::diamonds |> glimpse()
library(dplyr)
ggplot2::diamonds |> glimpse()
library(tidyr)
install.packages("tidyr")
library(tidyr)
tidyr::billboard
tidyr::cms_patient_care
tidyr::cms_patient_experience
tidyr::construction
tidyr::household
tidyr::relig_income
tidyr::population
tidyr::smiths
tidyr::us_rent_income
get_col_type(tidyr::us_rent_income, type = "dbl", df = FALSE)
get_col_type <- function(x, type, df = TRUE) {
if (type %nin% c("log", "int", "dbl", "chr", "fct", "list")) {
cli::cli_abort("No columns of that type...")
}
if (isFALSE(df)) {
df_cols <- switch(type,
log = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.logical))),
int = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.integer))),
dbl = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.double))),
chr = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.character))),
fct = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.factor))),
list = names(dplyr::select(
tibble::as_tibble(df), dplyr::where(is.list))))
} else {
df_cols <- switch(type,
log = dplyr::select(tibble::as_tibble(df), dplyr::where(is.logical)),
int = dplyr::select(tibble::as_tibble(df), dplyr::where(is.integer)),
dbl = dplyr::select(tibble::as_tibble(df), dplyr::where(is.double)),
chr = dplyr::select(tibble::as_tibble(df), dplyr::where(is.character)),
fct = dplyr::select(tibble::as_tibble(df), dplyr::where(is.factor)),
list = dplyr::select(tibble::as_tibble(df), dplyr::where(is.list)))
}
return(df_cols)
}
get_col_type(tidyr::us_rent_income, type = "dbl", df = FALSE)
structure(list(x = ""),
class = c("tbl_df", "tbl", "data.frame"),
row.names = integer(0),
names = character(0))
names(structure(list(x = ""),
class = c("tbl_df", "tbl", "data.frame"),
row.names = integer(0),
names = character(0)))
#' require(dplyr)
#' get_vec_col_type(dplyr::starwars, type = "chr")
#' get_vec_col_type(dplyr::starwars, type = "list")
get_vec_col_type <- function(df, type) {
if (type %nin% c("log", "int", "dbl", "chr", "fct", "list")) {
cli::cli_abort("No columns of that type...")
}
df_cols <- switch(type,
log = dplyr::select(tibble::as_tibble(df), dplyr::where(is.logical)),
int = dplyr::select(tibble::as_tibble(df), dplyr::where(is.integer)),
dbl = dplyr::select(tibble::as_tibble(df), dplyr::where(is.double)),
chr = dplyr::select(tibble::as_tibble(df), dplyr::where(is.character)),
fct = dplyr::select(tibble::as_tibble(df), dplyr::where(is.factor)),
list = dplyr::select(tibble::as_tibble(df), dplyr::where(is.list)))
if (ncol(df_cols) < 1 || nrow(df_cols) < 1 ) {
df_cols <- structure(list(x = ""),
class = c("tbl_df", "tbl", "data.frame"),
row.names = integer(0),
names = character(0))
nms <- names(df_cols)
df_col_nms <- purrr::set_names(nms)
return(df_col_nms)
cli::cli_alert_info("No columns of that type...")
} else {
nms <- names(df_cols)
df_col_nms <- purrr::set_names(nms)
return(df_col_nms)
}
get_vec_col_type(dplyr::starwars, type = "chr")
get_vec_col_type(dplyr::starwars, type = "list")
get_vec_col_type(dplyr::starwars, type = "array")
dplyr::storms
dplyr::storms |> glimpse()
tidyr::billboard |> glimpse()
tidyr::construction |> glimpse()
tidyr::fish_encounters |> glimpse()
get_vec_col_type(tidyr::fish_encounters, "chr")
#' require(dplyr)
#' get_vec_col_type(dplyr::starwars, type = "chr")
#' get_vec_col_type(dplyr::starwars, type = "list")
#' get_vec_col_type(tidyr::fish_encounters, "chr")
get_vec_col_type <- function(df, type) {
if (type %nin% c("log", "int", "dbl", "chr", "fct", "list")) {
cli::cli_abort("No columns of that type...")
}
df_cols <- switch(type,
log = dplyr::select(tibble::as_tibble(df), dplyr::where(is.logical)),
int = dplyr::select(tibble::as_tibble(df), dplyr::where(is.integer)),
dbl = dplyr::select(tibble::as_tibble(df), dplyr::where(is.double)),
chr = dplyr::select(tibble::as_tibble(df), dplyr::where(is.character)),
fct = dplyr::select(tibble::as_tibble(df), dplyr::where(is.factor)),
list = dplyr::select(tibble::as_tibble(df), dplyr::where(is.list)))
if (ncol(df_cols) < 1 || nrow(df_cols) < 1 ) {
cli::cli_alert_info("No columns of that type...")
df_cols <- structure(list(x = ""),
class = c("tbl_df", "tbl", "data.frame"),
row.names = integer(0),
names = character(0))
nms <- names(df_cols)
df_col_nms <- purrr::set_names(nms)
return(df_col_nms)
} else {
nms <- names(df_cols)
df_col_nms <- purrr::set_names(nms)
return(df_col_nms)
}
get_vec_col_type(tidyr::fish_encounters, "chr")
get_df_col_type(tidyr::fish_encounters, "chr")
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
devtools::document()
library(testPkgApp)
??get_col_types
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
devtools::document()
library(testPkgApp)
??get_col_types
??get_binary_checks_vec
??get_facet_checks_vec
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(testPkgApp)
??check_binary_vec
devtools::load_all()
devtools::document()
library(testPkgApp)
??make_binary_cols_vec
devtools::document()
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
devtools::document()
library(testPkgApp)
??get_col_type_df
??get_col_types
??make_facet_vec
devtools::load_all()
devtools::document()
library(testPkgApp)
??make_facet_cols_vec
devtools::load_all()
devtools::document()
library(testPkgApp)
??get_col_type_tbl
??get_col_types
facet_app_inputs(palmerpenguins::penguins)
num_app_inputs <- function(df) {
dbls <- get_col_types(df = df, type = 'dbl', return_tbl = FALSE)
ints <- get_col_types(df = df, type = 'int', return_tbl = FALSE)
nums <- c(dbls, ints)
return(nums)
}
num_app_inputs(dplyr::starwars)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
library(testPkgApp)
??cat_app_inputs
??binary_app_inputs
??facet_app_inputs
??num_app_inputs
c(double_vars, integer_vars, factor_vars) %<-% list(double_vars = c('bill_length_mm', 'bill_depth_mm'), integer_vars = c('flipper_length_mm', 'body_mass_g', 'year'), factor_vars = c('species', 'island', 'sex'))
??list2env()
make_ui_inputs(palmerpenguins::penguins)
devtools::load_all()
devtools::document()
??make_ui_inputs
library(testPkgApp)
devtools::load_all()
devtools::document()
library(testPkgApp)
devtools::load_all()
devtools::document()
library(testPkgApp)
