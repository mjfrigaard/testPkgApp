[{"path":"https://mjfrigaard.github.io/utap/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 utap authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mjfrigaard.github.io/utap/articles/utap.html","id":"function-tree","dir":"Articles","previous_headings":"","what":"Function tree","title":"utap","text":"lobstr package provides abstract syntax tree function, like use creating function trees. example, tree select_column_class(): function can demonstrated using data test helpers tests/testthat/helper.R","code":"lobstr::ast(     select_column_class(         col_class() # nested (not defined in roxygen2)       ) ) █─select_column_class  └─█─col_class test_data <- tibble::tibble(     list_var = list(fct_vec = fct_maker(size = 3),                      ord_vec = ord_maker(size = 3),                     chr_vec = chr_maker(size = 3),                     log_vec = log_maker(size = 3),                     int_vec = int_maker(size = 3),                     dbl_vec = dbl_maker(size = 3)),     log_var = log_maker(size = 6, missing = TRUE),     int_var = int_maker(size = 6, missing = TRUE),     dbl_var = dbl_maker(size = 6, missing = TRUE),     facet_var = facet_maker(facet_type = \"fct\",                              lvls = 4, missing = TRUE,                              size = 6),     bin_var = bin_maker(bin_type = \"log\",                          missing = TRUE, size = 6)) test_data"},{"path":"https://mjfrigaard.github.io/utap/articles/utap.html","id":"select_column_class","dir":"Articles","previous_headings":"Function tree","what":"select_column_class()","title":"utap","text":"","code":"select_column_class(   df = test_data,    class = \"log\")  select_column_class(   df = test_data,    class = c(\"int\", \"list\"))"},{"path":"https://mjfrigaard.github.io/utap/articles/utap.html","id":"get_column_class","dir":"Articles","previous_headings":"Function tree","what":"get_column_class()","title":"utap","text":"select_column_class() called within get_column_class(), wrapper function includes return_tbl argument returning columns named vector.","code":"lobstr::ast(   get_column_class(     select_column_class(       col_class() # nested (not defined in roxygen2)       )     ) ) █─get_column_class  └─█─select_column_class    └─█─col_class get_column_class(   df = test_data,    class = c(\"int\", \"dbl\"),   return_tbl = TRUE)  get_column_class(   df = test_data,    class = c(\"int\", \"dbl\"),   return_tbl = FALSE) int_var   dbl_var       \"int_var\" \"dbl_var\""},{"path":"https://mjfrigaard.github.io/utap/articles/utap.html","id":"pull_type_cols","dir":"Articles","previous_headings":"Function tree","what":"pull_[type]_cols()","title":"utap","text":"pull_[type]_cols() functions use get_column_class() return initial set column names.","code":"lobstr::ast(     get_column_class(       select_column_class(col_class()),     pull_binary_cols(),     pull_facet_cols(),     pull_cat_cols(),     pull_numeric_cols())   ) █─get_column_class  ├─█─select_column_class  │ └─█─col_class  ├─█─pull_binary_cols  ├─█─pull_facet_cols  ├─█─pull_cat_cols  └─█─pull_numeric_cols"},{"path":"https://mjfrigaard.github.io/utap/articles/utap.html","id":"pull_binary_cols","dir":"Articles","previous_headings":"Function tree","what":"pull_binary_cols()","title":"utap","text":"","code":"lobstr::ast(     pull_binary_cols(check_binary_vec(                           check_log_binary(),                           check_int_binary(),                           check_fct_binary()),                      make_binary_vec())) █─pull_binary_cols  ├─█─check_binary_vec  │ ├─█─check_log_binary  │ ├─█─check_int_binary  │ └─█─check_fct_binary  └─█─make_binary_vec pull_binary_cols(df = test_data) log_var   bin_var       \"log_var\" \"bin_var\""},{"path":"https://mjfrigaard.github.io/utap/articles/utap.html","id":"pull_facet_cols","dir":"Articles","previous_headings":"Function tree","what":"pull_facet_cols()","title":"utap","text":"","code":"lobstr::ast(     pull_facet_cols(check_facet_vec(                           check_chr_facet(),                            check_fct_facet()),                       make_facet_vec()) ) █─pull_facet_cols  ├─█─check_facet_vec  │ ├─█─check_chr_facet  │ └─█─check_fct_facet  └─█─make_facet_vec pull_facet_cols(df = test_data) facet_var       \"facet_var\""},{"path":"https://mjfrigaard.github.io/utap/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Frigaard. Maintainer.","code":""},{"path":"https://mjfrigaard.github.io/utap/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frigaard M (2023). utap: Unit Test Shiny App Package. R package version 0.1.0, https://mjfrigaard.github.io/utap/.","code":"@Manual{,   title = {utap: Unit Test Your Shiny App Package},   author = {Martin Frigaard},   year = {2023},   note = {R package version 0.1.0},   url = {https://mjfrigaard.github.io/utap/}, }"},{"path":"https://mjfrigaard.github.io/utap/index.html","id":"utap","dir":"","previous_headings":"","what":"Unit Test Your Shiny App Package","title":"Unit Test Your Shiny App Package","text":"goal utap demonstrate perform unit tests shiny utility functions testthat.","code":""},{"path":"https://mjfrigaard.github.io/utap/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Unit Test Your Shiny App Package","text":"don’t want install package, might want download example (read post learn ’s contents).","code":""},{"path":"https://mjfrigaard.github.io/utap/index.html","id":"r-files","dir":"","previous_headings":"","what":"R files","title":"Unit Test Your Shiny App Package","text":"","code":"#> R/ #> ├── column_classes.R #> ├── pull_binary_cols.R #> ├── pull_cat_cols.R #> ├── pull_facet_cols.R #> ├── pull_numeric_cols.R #> ├── utap-package.R #> └── utils.R"},{"path":"https://mjfrigaard.github.io/utap/index.html","id":"unit-tests","dir":"","previous_headings":"","what":"Unit tests","title":"Unit Test Your Shiny App Package","text":"","code":"#> tests/testthat/ #> ├── test-column_classes.R #> ├── test-pull_binary_cols.R #> ├── test-pull_cat_cols.R #> ├── test-pull_facet_cols.R #> ├── test-pull_numeric_cols.R #> └── test-utils.R"},{"path":"https://mjfrigaard.github.io/utap/index.html","id":"unit-test-results","dir":"","previous_headings":"","what":"Unit test results","title":"Unit Test Your Shiny App Package","text":"","code":"==> devtools::test()  ℹ Testing utap ✔ | F W S  OK | Context ✔ |        25 | column_classes                      ✔ |        29 | pull_binary_cols                    ✔ |         4 | pull_cat_cols                       ✔ |        20 | pull_facet_cols                     ✔ |         5 | pull_numeric_cols                   ✔ |         3 | utils                                ══ Results ════════════════════════════════════════ Duration: 1.8 s  [ FAIL 0 | WARN 0 | SKIP 0 | PASS 86 ]"},{"path":"https://mjfrigaard.github.io/utap/reference/check_binary_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary checks (helper) — check_binary_vec","title":"Binary checks (helper) — check_binary_vec","text":"Binary checks (helper)","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/check_binary_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary checks (helper) — check_binary_vec","text":"","code":"check_binary_vec(x, type)"},{"path":"https://mjfrigaard.github.io/utap/reference/check_binary_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary checks (helper) — check_binary_vec","text":"x vector type type column return.","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/check_binary_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary checks (helper) — check_binary_vec","text":"TRUE/FALSE binary","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/check_binary_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary checks (helper) — check_binary_vec","text":"","code":"require(palmerpenguins) #> Loading required package: palmerpenguins check_binary_vec(palmerpenguins::penguins$sex, type = \"fct\") #> [1] TRUE check_binary_vec(palmerpenguins::penguins$species, type = \"fct\") #> [1] FALSE"},{"path":"https://mjfrigaard.github.io/utap/reference/check_facet_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Facet checks (helper) — check_facet_vec","title":"Facet checks (helper) — check_facet_vec","text":"Facet checks (helper)","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/check_facet_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facet checks (helper) — check_facet_vec","text":"","code":"check_facet_vec(x, type)"},{"path":"https://mjfrigaard.github.io/utap/reference/check_facet_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facet checks (helper) — check_facet_vec","text":"x vector type type column return.","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/check_facet_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facet checks (helper) — check_facet_vec","text":"TRUE/FALSE facet variable (< 5 levels)","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/check_facet_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facet checks (helper) — check_facet_vec","text":"","code":"require(NHANES) #> Loading required package: NHANES #> Warning: there is no package called ‘NHANES’ check_facet_vec(NHANES::NHANES$Education, type = \"fct\") #> Error in loadNamespace(x): there is no package called ‘NHANES’ levels(NHANES::NHANES$Education) #> Error in loadNamespace(x): there is no package called ‘NHANES’ check_facet_vec(NHANES::NHANES$MaritalStatus, type = \"fct\") #> Error in loadNamespace(x): there is no package called ‘NHANES’ levels(NHANES::NHANES$MaritalStatus) #> Error in loadNamespace(x): there is no package called ‘NHANES’"},{"path":"https://mjfrigaard.github.io/utap/reference/get_column_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Get column types — get_column_class","title":"Get column types — get_column_class","text":"Return column data types","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/get_column_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get column types — get_column_class","text":"","code":"get_column_class(df, class, return_tbl = TRUE)"},{"path":"https://mjfrigaard.github.io/utap/reference/get_column_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get column types — get_column_class","text":"df data.frame tibble return_tbl logical, return tibble (TRUE) named vector (FALSE) type type column return One : \"log\": logical \"dbl\": double \"int\": integer \"chr\": character \"fct\": factor \"ord\": factor (ordered) \"list\": list","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/get_column_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get column types — get_column_class","text":"named vector tibble columns matching type (empty vector tibble columns specified type exist)","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/get_column_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get column types — get_column_class","text":"","code":"require(dplyr) #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union require(tidyr) #> Loading required package: tidyr get_column_class(dplyr::starwars, class = \"chr\") #> # A tibble: 87 × 8 #>    name           hair_color skin_color eye_color sex   gender homeworld species #>    <chr>          <chr>      <chr>      <chr>     <chr> <chr>  <chr>     <chr>   #>  1 Luke Skywalker blond      fair       blue      male  mascu… Tatooine  Human   #>  2 C-3PO          NA         gold       yellow    none  mascu… Tatooine  Droid   #>  3 R2-D2          NA         white, bl… red       none  mascu… Naboo     Droid   #>  4 Darth Vader    none       white      yellow    male  mascu… Tatooine  Human   #>  5 Leia Organa    brown      light      brown     fema… femin… Alderaan  Human   #>  6 Owen Lars      brown, gr… light      blue      male  mascu… Tatooine  Human   #>  7 Beru Whitesun… brown      light      blue      fema… femin… Tatooine  Human   #>  8 R5-D4          NA         white, red red       none  mascu… Tatooine  Droid   #>  9 Biggs Darklig… black      light      brown     male  mascu… Tatooine  Human   #> 10 Obi-Wan Kenobi auburn, w… fair       blue-gray male  mascu… Stewjon   Human   #> # ℹ 77 more rows get_column_class(dplyr::starwars, class = \"chr\", return_tbl = FALSE) #>         name   hair_color   skin_color    eye_color          sex       gender  #>       \"name\" \"hair_color\" \"skin_color\"  \"eye_color\"        \"sex\"     \"gender\"  #>    homeworld      species  #>  \"homeworld\"    \"species\"  get_column_class(dplyr::starwars, class = \"list\") #> # A tibble: 87 × 3 #>    films     vehicles  starships #>    <list>    <list>    <list>    #>  1 <chr [5]> <chr [2]> <chr [2]> #>  2 <chr [6]> <chr [0]> <chr [0]> #>  3 <chr [7]> <chr [0]> <chr [0]> #>  4 <chr [4]> <chr [0]> <chr [1]> #>  5 <chr [5]> <chr [1]> <chr [0]> #>  6 <chr [3]> <chr [0]> <chr [0]> #>  7 <chr [3]> <chr [0]> <chr [0]> #>  8 <chr [1]> <chr [0]> <chr [0]> #>  9 <chr [1]> <chr [0]> <chr [1]> #> 10 <chr [6]> <chr [1]> <chr [5]> #> # ℹ 77 more rows get_column_class(dplyr::starwars, class = \"list\", return_tbl = FALSE) #>       films    vehicles   starships  #>     \"films\"  \"vehicles\" \"starships\"  get_column_class(tidyr::fish_encounters, \"chr\") #> # A tibble: 0 × 0 get_column_class(tidyr::fish_encounters, \"chr\", return_tbl = FALSE) #> named character(0)"},{"path":"https://mjfrigaard.github.io/utap/reference/grapes-nin-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverted versions of %in% — %nin%","title":"Inverted versions of %in% — %nin%","text":"Inverted versions %%","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/grapes-nin-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverted versions of %in% — %nin%","text":"","code":"x %nin% table"},{"path":"https://mjfrigaard.github.io/utap/reference/grapes-nin-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverted versions of %in% — %nin%","text":"","code":"1 %nin% 1:10 #> [1] FALSE \"A\" %nin% 1:10 #> [1] TRUE"},{"path":"https://mjfrigaard.github.io/utap/reference/make_binary_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vector of binary columns by type (helper) — make_binary_vec","title":"Create vector of binary columns by type (helper) — make_binary_vec","text":"Create vector binary columns type (helper)","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/make_binary_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vector of binary columns by type (helper) — make_binary_vec","text":"","code":"make_binary_vec(df, type)"},{"path":"https://mjfrigaard.github.io/utap/reference/make_binary_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vector of binary columns by type (helper) — make_binary_vec","text":"df data.frame tibble type type column return","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/make_binary_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vector of binary columns by type (helper) — make_binary_vec","text":"vector binary columns","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/make_binary_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vector of binary columns by type (helper) — make_binary_vec","text":"","code":"require(palmerpenguins) require(dplyr) make_binary_vec(   df = dplyr::select(     palmerpenguins::penguins,     dplyr::where(is.factor)   ),   type = \"fct\" ) #>   sex  #> \"sex\""},{"path":"https://mjfrigaard.github.io/utap/reference/make_facet_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vector of facet columns by type (helper) — make_facet_vec","title":"Create vector of facet columns by type (helper) — make_facet_vec","text":"Create vector facet columns type (helper)","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/make_facet_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vector of facet columns by type (helper) — make_facet_vec","text":"","code":"make_facet_vec(df, type)"},{"path":"https://mjfrigaard.github.io/utap/reference/make_facet_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vector of facet columns by type (helper) — make_facet_vec","text":"df data.frame tibble type type column return","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/make_facet_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vector of facet columns by type (helper) — make_facet_vec","text":"vector facet columns (< 5 levels)","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/make_facet_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vector of facet columns by type (helper) — make_facet_vec","text":"","code":"require(NHANES) #> Loading required package: NHANES #> Warning: there is no package called ‘NHANES’ require(dplyr) facets <- make_facet_vec(   df = dplyr::select(     NHANES::NHANES,     dplyr::where(is.factor)),   type = \"fct\") #> Error in loadNamespace(x): there is no package called ‘NHANES’ facets #> Error in eval(expr, envir, enclos): object 'facets' not found"},{"path":"https://mjfrigaard.github.io/utap/reference/pull_binary_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary app inputs — pull_binary_cols","title":"Binary app inputs — pull_binary_cols","text":"Binary app inputs","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_binary_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary app inputs — pull_binary_cols","text":"","code":"pull_binary_cols(df)"},{"path":"https://mjfrigaard.github.io/utap/reference/pull_binary_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary app inputs — pull_binary_cols","text":"df data.frame tibble","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_binary_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary app inputs — pull_binary_cols","text":"named character vector binary column names","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_binary_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary app inputs — pull_binary_cols","text":"","code":"require(palmerpenguins) require(dplyr) pull_binary_cols(palmerpenguins::penguins) #>   sex  #> \"sex\"  pull_binary_cols(dplyr::starwars) #>   gender  #> \"gender\""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_cat_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorical app inputs — pull_cat_cols","title":"Categorical app inputs — pull_cat_cols","text":"Categorical app inputs","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_cat_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorical app inputs — pull_cat_cols","text":"","code":"pull_cat_cols(df)"},{"path":"https://mjfrigaard.github.io/utap/reference/pull_cat_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorical app inputs — pull_cat_cols","text":"df data.frame tibble","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_cat_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorical app inputs — pull_cat_cols","text":"named character vector character factor column names","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_cat_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorical app inputs — pull_cat_cols","text":"","code":"require(palmerpenguins) require(dplyr) pull_cat_cols(palmerpenguins::penguins) #>    island       sex   species  #>  \"island\"     \"sex\" \"species\"  pull_cat_cols(dplyr::starwars) #>    eye_color       gender   hair_color    homeworld         name          sex  #>  \"eye_color\"     \"gender\" \"hair_color\"  \"homeworld\"       \"name\"        \"sex\"  #>   skin_color      species  #> \"skin_color\"    \"species\""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_facet_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Facet app inputs — pull_facet_cols","title":"Facet app inputs — pull_facet_cols","text":"Facet app inputs","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_facet_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facet app inputs — pull_facet_cols","text":"","code":"pull_facet_cols(df)"},{"path":"https://mjfrigaard.github.io/utap/reference/pull_facet_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facet app inputs — pull_facet_cols","text":"df data.frame tibble","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_facet_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facet app inputs — pull_facet_cols","text":"named character vector factor character column names < 5 unique levels","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_facet_cols.html","id":"variables-to-use-for-facets","dir":"Reference","previous_headings":"","what":"Variables to use for facets","title":"Facet app inputs — pull_facet_cols","text":"function designed quickly determine variables appropriate number categorical levels using ggplot2::facet_wrap() ggplot2::facet_grid()","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_facet_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facet app inputs — pull_facet_cols","text":"","code":"require(dplyr) require(NHANES) #> Loading required package: NHANES #> Warning: there is no package called ‘NHANES’ pull_facet_cols(df = dplyr::starwars) #>   sex  #> \"sex\"  pull_facet_cols(df = NHANES::NHANES) #> Error in purrr::map(.x = class, .f = col_class, df = df): ℹ In index: 1. #> Caused by error in `loadNamespace()`: #> ! there is no package called ‘NHANES’  str(dplyr::select(   dplyr::starwars,   dplyr::all_of(pull_facet_cols(df = dplyr::starwars)) )) #> tibble [87 × 1] (S3: tbl_df/tbl/data.frame) #>  $ sex: chr [1:87] \"male\" \"none\" \"none\" \"male\" ... str(dplyr::select(   NHANES::NHANES,   dplyr::all_of(pull_facet_cols(df = NHANES::NHANES)) )) #> Error in loadNamespace(x): there is no package called ‘NHANES’"},{"path":"https://mjfrigaard.github.io/utap/reference/pull_numeric_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric app inputs — pull_numeric_cols","title":"Numeric app inputs — pull_numeric_cols","text":"Numeric app inputs","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_numeric_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric app inputs — pull_numeric_cols","text":"","code":"pull_numeric_cols(df)"},{"path":"https://mjfrigaard.github.io/utap/reference/pull_numeric_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric app inputs — pull_numeric_cols","text":"df data.frame tibble","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_numeric_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numeric app inputs — pull_numeric_cols","text":"named character vector integer double column names","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/pull_numeric_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numeric app inputs — pull_numeric_cols","text":"","code":"require(palmerpenguins) require(dplyr) pull_numeric_cols(palmerpenguins::penguins) #>      bill_length_mm       bill_depth_mm   flipper_length_mm         body_mass_g  #>    \"bill_length_mm\"     \"bill_depth_mm\" \"flipper_length_mm\"       \"body_mass_g\"  #>                year  #>              \"year\"  pull_numeric_cols(dplyr::starwars) #>         mass   birth_year       height  #>       \"mass\" \"birth_year\"     \"height\""},{"path":"https://mjfrigaard.github.io/utap/reference/select_column_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Select column class (helper) — select_column_class","title":"Select column class (helper) — select_column_class","text":"Return column data class()","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/select_column_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select column class (helper) — select_column_class","text":"","code":"select_column_class(df, class)"},{"path":"https://mjfrigaard.github.io/utap/reference/select_column_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select column class (helper) — select_column_class","text":"df data.frame tibble class class column return. One : \"log\": logical \"dbl\": double \"int\": integer \"chr\": character \"fct\": factor \"list\": list","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/select_column_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select column class (helper) — select_column_class","text":"tibble columns matching class (empty tibble columns specified type exist)","code":""},{"path":"https://mjfrigaard.github.io/utap/reference/select_column_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select column class (helper) — select_column_class","text":"","code":"require(dplyr) select_column_class(df = dplyr::starwars, class = \"chr\") #> # A tibble: 87 × 8 #>    name           hair_color skin_color eye_color sex   gender homeworld species #>    <chr>          <chr>      <chr>      <chr>     <chr> <chr>  <chr>     <chr>   #>  1 Luke Skywalker blond      fair       blue      male  mascu… Tatooine  Human   #>  2 C-3PO          NA         gold       yellow    none  mascu… Tatooine  Droid   #>  3 R2-D2          NA         white, bl… red       none  mascu… Naboo     Droid   #>  4 Darth Vader    none       white      yellow    male  mascu… Tatooine  Human   #>  5 Leia Organa    brown      light      brown     fema… femin… Alderaan  Human   #>  6 Owen Lars      brown, gr… light      blue      male  mascu… Tatooine  Human   #>  7 Beru Whitesun… brown      light      blue      fema… femin… Tatooine  Human   #>  8 R5-D4          NA         white, red red       none  mascu… Tatooine  Droid   #>  9 Biggs Darklig… black      light      brown     male  mascu… Tatooine  Human   #> 10 Obi-Wan Kenobi auburn, w… fair       blue-gray male  mascu… Stewjon   Human   #> # ℹ 77 more rows select_column_class(df = dplyr::starwars, class = c(\"chr\", \"list\")) #> # A tibble: 87 × 11 #>    name     hair_color skin_color eye_color sex   gender homeworld species films #>    <chr>    <chr>      <chr>      <chr>     <chr> <chr>  <chr>     <chr>   <lis> #>  1 Luke Sk… blond      fair       blue      male  mascu… Tatooine  Human   <chr> #>  2 C-3PO    NA         gold       yellow    none  mascu… Tatooine  Droid   <chr> #>  3 R2-D2    NA         white, bl… red       none  mascu… Naboo     Droid   <chr> #>  4 Darth V… none       white      yellow    male  mascu… Tatooine  Human   <chr> #>  5 Leia Or… brown      light      brown     fema… femin… Alderaan  Human   <chr> #>  6 Owen La… brown, gr… light      blue      male  mascu… Tatooine  Human   <chr> #>  7 Beru Wh… brown      light      blue      fema… femin… Tatooine  Human   <chr> #>  8 R5-D4    NA         white, red red       none  mascu… Tatooine  Droid   <chr> #>  9 Biggs D… black      light      brown     male  mascu… Tatooine  Human   <chr> #> 10 Obi-Wan… auburn, w… fair       blue-gray male  mascu… Stewjon   Human   <chr> #> # ℹ 77 more rows #> # ℹ 2 more variables: vehicles <list>, starships <list> select_column_class(df = mtcars, class = \"chr\") #> # A tibble: 0 × 0 select_column_class(df = mtcars, class = c(\"chr\", \"list\")) #> # A tibble: 0 × 0"},{"path":"https://mjfrigaard.github.io/utap/reference/utap-package.html","id":null,"dir":"Reference","previous_headings":"","what":"utap: Unit Test Your Shiny App Package — utap-package","title":"utap: Unit Test Your Shiny App Package — utap-package","text":"shiny app developed package using devtools usethis.","code":""},{"path":[]}]
